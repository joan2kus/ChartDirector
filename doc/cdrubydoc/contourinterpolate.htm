<HTML>
<HEAD>
<Title>Contour Interpolation</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Contour Interpolation</p>
<hr class="separator">
<div class="content">
<img src="images/contourinterpolate0.jpg">&nbsp;&nbsp;<img src="images/contourinterpolate1.jpg">&nbsp;&nbsp;<img src="images/contourinterpolate2.jpg">&nbsp;&nbsp;<img src="images/contourinterpolate3.jpg">
<br><br>
This example demonstrates spline and linear surface interpolation, and discrete and continuous coloring.<br><br>
The data points for the contour layer are the z values at certain (x, y) points. However, to draw the contour and to color the layer, it is necessarily to know the z values at all pixels in the xy plane. ChartDirector uses surface interpolation to compute the z values at all pixels from the given data points. Two types of interpolation - spline and linear - are supported. They can be configured using <a href="ContourLayer.setSmoothInterpolation.htm">ContourLayer.setSmoothInterpolation</a>.<br><br>
The coloring of the contour layer can be discrete or continuous, configurable using <a href="ColorAxis.setColorGradient.htm">ColorAxis.setColorGradient</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/contourinterpolate_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class ContourinterpolateController &lt; ApplicationController

    def index()
        @title = "Contour Interpolation"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 4
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The x and y coordinates of the grid
        dataX = [-4, -3, -2, -1, 0, 1, 2, 3, 4]
        dataY = [-4, -3, -2, -1, 0, 1, 2, 3, 4]

        # The values at the grid points. In this example, we will compute the values using
        # the formula z = Sin(x * pi / 3) * Sin(y * pi / 3).
        dataZ = Array.new((dataX.length) * (dataY.length))
        0.upto(dataY.length - 1) do |yIndex|
            y = dataY[yIndex]
            0.upto(dataX.length - 1) do |xIndex|
                x = dataX[xIndex]
                dataZ[yIndex * (dataX.length) + xIndex] = Math.sin(x * 3.1416 / 3
                    ) * Math.sin(y * 3.1416 / 3)
            end
        end

        # Create a XYChart object of size 360 x 360 pixels
        c = ChartDirector::XYChart.new(360, 360)

        # Set the plotarea at (30, 25) and of size 300 x 300 pixels. Use semi-transparent
        # black (c0000000) for both horizontal and vertical grid lines
        c.setPlotArea(30, 25, 300, 300, -1, -1, -1, 0xc0000000, -1)

        # Add a contour layer using the given data
        layer = c.addContourLayer(dataX, dataY, dataZ)

        # Set the x-axis and y-axis scale
        c.xAxis().setLinearScale(-4, 4, 1)
        c.yAxis().setLinearScale(-4, 4, 1)

        if params["img"] == "0"
            # Discrete coloring, spline surface interpolation
            c.addTitle("Spline Surface - Discrete Coloring", "arialbi.ttf", 12)
        elsif params["img"] == "1"
            # Discrete coloring, linear surface interpolation
            c.addTitle("Linear Surface - Discrete Coloring", "arialbi.ttf", 12)
            layer.setSmoothInterpolation(false)
        elsif params["img"] == "2"
            # Smooth coloring, spline surface interpolation
            c.addTitle("Spline Surface - Continuous Coloring", "arialbi.ttf", 12)
            layer.setContourColor(ChartDirector::Transparent)
            layer.colorAxis().setColorGradient(true)
        else
            # Discrete coloring, linear surface interpolation
            c.addTitle("Linear Surface - Continuous Coloring", "arialbi.ttf", 12)
            layer.setSmoothInterpolation(false)
            layer.setContourColor(ChartDirector::Transparent)
            layer.colorAxis().setColorGradient(true)
        end

        # Output the chart
        send_data(c.makeChart2(ChartDirector::JPG), :type =&gt; "image/jpeg",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/contourinterpolate.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

def createChart(img)

    # The x and y coordinates of the grid
    dataX = [-4, -3, -2, -1, 0, 1, 2, 3, 4]
    dataY = [-4, -3, -2, -1, 0, 1, 2, 3, 4]

    # The values at the grid points. In this example, we will compute the values
    # using the formula z = Sin(x * pi / 3) * Sin(y * pi / 3).
    dataZ = Array.new((dataX.length) * (dataY.length))
    0.upto(dataY.length - 1) do |yIndex|
        y = dataY[yIndex]
        0.upto(dataX.length - 1) do |xIndex|
            x = dataX[xIndex]
            dataZ[yIndex * (dataX.length) + xIndex] = Math.sin(x * 3.1416 / 3
                ) * Math.sin(y * 3.1416 / 3)
        end
    end

    # Create a XYChart object of size 360 x 360 pixels
    c = ChartDirector::XYChart.new(360, 360)

    # Set the plotarea at (30, 25) and of size 300 x 300 pixels. Use semi-transparent
    # black (c0000000) for both horizontal and vertical grid lines
    c.setPlotArea(30, 25, 300, 300, -1, -1, -1, 0xc0000000, -1)

    # Add a contour layer using the given data
    layer = c.addContourLayer(dataX, dataY, dataZ)

    # Set the x-axis and y-axis scale
    c.xAxis().setLinearScale(-4, 4, 1)
    c.yAxis().setLinearScale(-4, 4, 1)

    if img == "0"
        # Discrete coloring, spline surface interpolation
        c.addTitle("Spline Surface - Discrete Coloring", "arialbi.ttf", 12)
    elsif img == "1"
        # Discrete coloring, linear surface interpolation
        c.addTitle("Linear Surface - Discrete Coloring", "arialbi.ttf", 12)
        layer.setSmoothInterpolation(false)
    elsif img == "2"
        # Smooth coloring, spline surface interpolation
        c.addTitle("Spline Surface - Continuous Coloring", "arialbi.ttf", 12)
        layer.setContourColor(ChartDirector::Transparent)
        layer.colorAxis().setColorGradient(true)
    else
        # Discrete coloring, linear surface interpolation
        c.addTitle("Linear Surface - Continuous Coloring", "arialbi.ttf", 12)
        layer.setSmoothInterpolation(false)
        layer.setContourColor(ChartDirector::Transparent)
        layer.colorAxis().setColorGradient(true)
    end

    # Output the chart
    c.makeChart("contourinterpolate%s.jpg" % img)
end

createChart("0")
createChart("1")
createChart("2")
createChart("3")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
