<HTML>
<HEAD>
<Title>Percentage Bar Chart</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Percentage Bar Chart</p>
<hr class="separator">
<div class="content">
<img src="images/percentbar.png">
<br><br>
This example demonstrates creating a percentage bar chart with a legend box. It also demonstrates gradient background color, rounded frame, soft drop shadow, and using <a href="cdml.htm">CDML</a> to include custom icons in the legend box.<br><br>
A percentage bar chart is like a stacked bar chart, except the bars are individually scaled so that they stacked up to 100.<br><br>
The key features demonstrated in this example are:<br><br>
<ul><li> The gradient background is achieved by using <a href="BaseChart.linearGradientColor.htm">BaseChart.linearGradientColor</a> to define the gradient color, then use <a href="BaseChart.setBackground.htm">BaseChart.setBackground</a> to set it as the chart background color.<br><br>
<li> The rounded frame is configured using <a href="BaseChart.setRoundedFrame.htm">BaseChart.setRoundedFrame</a>.<br><br>
<li> The soft drop shadow is configured using <a href="BaseChart.setDropShadow.htm">BaseChart.setDropShadow</a>.<br><br>
<li> The legend box is added using <a href="BaseChart.addLegend.htm">BaseChart.addLegend</a>. The legend key (the color box to the right of each legend entry) is set to 16 x 32 pixels using <a href="LegendBox.setKeySize.htm">LegendBox.setKeySize</a>, so as to match the size of the custom icons.<br><br>
<li> The ordering of the legend entries is reversed using <a href="Layer.setLegend.htm">Layer.setLegend</a>, so that the legend box shows the last data set name first. This is useful for a vertical legend box in a vertical stacked chart with purely positive data. In such case, the last data set will be on the top of the stacked bars. Reversing the ordering of the legend entries will make it visually consistent with the stacking order of the data set.<br><br>
<li> The percentage bar layer is added using <a href="XYChart.addBarLayer2.htm">XYChart.addBarLayer2</a> with the <a href="ChartDirector.Percentage.htm">Percentage</a> predefined constant.<br><br>
<li> Multiple data sets are added to the bar layer using <a href="Layer.addDataSet.htm">Layer.addDataSet</a>. <a href="cdml.htm">CDML</a> is used to include custom icons in the data set names.<br><br>
<li> Labels for the bar segments are added using <a href="Layer.setDataLabelStyle.htm">Layer.setDataLabelStyle</a>, with center alignment configured using <a href="TextBox.setAlignment.htm">TextBox.setAlignment</a>.</ul>
Note that by default, the data label format is <b>{percent}%</b> (showing the percentage) for a percentage bar layer, as opposed to <b>{value}</b> (showing the data value) for other types of bar layer. The data label format can be modified using <a href="Layer.setDataLabelFormat.htm">Layer.setDataLabelFormat</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/percentbar_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class PercentbarController &lt; ApplicationController

    def index()
        @title = "Percentage Bar Chart"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the bar chart
        data0 = [100, 125, 245, 147, 67]
        data1 = [85, 156, 179, 211, 123]
        data2 = [97, 87, 56, 267, 157]

        # The labels for the bar chart
        labels = ["Mon", "Tue", "Wed", "Thu", "Fri"]

        # Create a XYChart object of size 500 x 320 pixels. Use a vertical gradient color
        # from pale blue (e8f0f8) to sky blue (aaccff) spanning half the chart height as
        # background. Set border to blue (88aaee). Use rounded corners. Enable soft drop
        # shadow.
        c = ChartDirector::XYChart.new(500, 320)
        c.setBackground(c.linearGradientColor(0, 0, 0, c.getHeight() / 2, 0xe8f0f8,
            0xaaccff), 0x88aaee)
        c.setRoundedFrame()
        c.setDropShadow()

        # Set directory for loading images to current script directory
        c.setSearchPath(File.dirname(__FILE__))

        # Add a title to the chart using 15 points Arial Italic. Set top/bottom margins to
        # 15 pixels.
        title = c.addTitle("Weekly Product Sales", "ariali.ttf", 15)
        title.setMargin2(0, 0, 15, 15)

        # Tentatively set the plotarea to 50 pixels from the left edge, and to just under
        # the title. Set the width to 60% of the chart width, and the height to 50 pixels
        # from the bottom edge. Use pale blue (e8f0f8) background, transparent border, and
        # grey (aaaaaa) grid lines.
        c.setPlotArea(50, title.getHeight(), c.getWidth() * 6 / 10, c.getHeight(
            ) - title.getHeight() - 50, 0xe8f0f8, -1, ChartDirector::Transparent, 0xaaaaaa
            )

        # Add a legend box where the top-right corner is anchored at 10 pixels from the
        # right edge, and just under the title. Use vertical layout and 8 points Arial
        # font.
        legendBox = c.addLegend(c.getWidth() - 10, title.getHeight(), true, "arial.ttf", 8
            )
        legendBox.setAlignment(ChartDirector::TopRight)

        # Set the legend box background and border to transparent
        legendBox.setBackground(ChartDirector::Transparent, ChartDirector::Transparent)

        # Set the legend box icon size to 16 x 32 pixels to match with custom icon size
        legendBox.setKeySize(16, 32)

        # Set axes to transparent
        c.xAxis().setColors(ChartDirector::Transparent)
        c.yAxis().setColors(ChartDirector::Transparent)

        # Set the labels on the x axis
        c.xAxis().setLabels(labels)

        # Add a percentage bar layer
        layer = c.addBarLayer2(ChartDirector::Percentage)

        # Add the three data sets to the bar layer, using icons images with labels as data
        # set names
        layer.addDataSet(data0, 0x66aaee,
            "&lt;*block,valign=absmiddle*&gt;&lt;*img=service.png*&gt; Service&lt;*/*&gt;")
        layer.addDataSet(data1, 0xeebb22,
            "&lt;*block,valign=absmiddle*&gt;&lt;*img=software.png*&gt; Software&lt;*/*&gt;")
        layer.addDataSet(data2, 0xcc88ff,
            "&lt;*block,valign=absmiddle*&gt;&lt;*img=computer.png*&gt; Hardware&lt;*/*&gt;")

        # Use soft lighting effect with light direction from top
        layer.setBorderColor(ChartDirector::Transparent, ChartDirector::softLighting(
            ChartDirector::Top))

        # Enable data label at the middle of the the bar
        layer.setDataLabelStyle().setAlignment(ChartDirector::Center)

        # For a vertical stacked chart with positive data only, the last data set is
        # always on top. However, in a vertical legend box, the last data set is at the
        # bottom. This can be reversed by using the setLegend method.
        layer.setLegend(ChartDirector::ReverseLegend)

        # Adjust the plot area size, such that the bounding box (inclusive of axes) is 15
        # pixels from the left edge, just below the title, 10 pixels to the right of the
        # legend box, and 15 pixels from the bottom edge.
        c.packPlotArea(15, title.getHeight(), c.layoutLegend().getLeftX() - 10,
            c.getHeight() - 15)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/percentbar.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the bar chart
data0 = [100, 125, 245, 147, 67]
data1 = [85, 156, 179, 211, 123]
data2 = [97, 87, 56, 267, 157]

# The labels for the bar chart
labels = ["Mon", "Tue", "Wed", "Thu", "Fri"]

# Create a XYChart object of size 500 x 320 pixels. Use a vertical gradient color
# from pale blue (e8f0f8) to sky blue (aaccff) spanning half the chart height as
# background. Set border to blue (88aaee). Use rounded corners. Enable soft drop
# shadow.
c = ChartDirector::XYChart.new(500, 320)
c.setBackground(c.linearGradientColor(0, 0, 0, c.getHeight() / 2, 0xe8f0f8, 0xaaccff
    ), 0x88aaee)
c.setRoundedFrame()
c.setDropShadow()

# Add a title to the chart using 15 points Arial Italic. Set top/bottom margins to 15
# pixels.
title = c.addTitle("Weekly Product Sales", "ariali.ttf", 15)
title.setMargin2(0, 0, 15, 15)

# Tentatively set the plotarea to 50 pixels from the left edge, and to just under the
# title. Set the width to 60% of the chart width, and the height to 50 pixels from
# the bottom edge. Use pale blue (e8f0f8) background, transparent border, and grey
# (aaaaaa) grid lines.
c.setPlotArea(50, title.getHeight(), c.getWidth() * 6 / 10, c.getHeight(
    ) - title.getHeight() - 50, 0xe8f0f8, -1, ChartDirector::Transparent, 0xaaaaaa)

# Add a legend box where the top-right corner is anchored at 10 pixels from the right
# edge, and just under the title. Use vertical layout and 8 points Arial font.
legendBox = c.addLegend(c.getWidth() - 10, title.getHeight(), true, "arial.ttf", 8)
legendBox.setAlignment(ChartDirector::TopRight)

# Set the legend box background and border to transparent
legendBox.setBackground(ChartDirector::Transparent, ChartDirector::Transparent)

# Set the legend box icon size to 16 x 32 pixels to match with custom icon size
legendBox.setKeySize(16, 32)

# Set axes to transparent
c.xAxis().setColors(ChartDirector::Transparent)
c.yAxis().setColors(ChartDirector::Transparent)

# Set the labels on the x axis
c.xAxis().setLabels(labels)

# Add a percentage bar layer
layer = c.addBarLayer2(ChartDirector::Percentage)

# Add the three data sets to the bar layer, using icons images with labels as data
# set names
layer.addDataSet(data0, 0x66aaee,
    "&lt;*block,valign=absmiddle*&gt;&lt;*img=service.png*&gt; Service&lt;*/*&gt;")
layer.addDataSet(data1, 0xeebb22,
    "&lt;*block,valign=absmiddle*&gt;&lt;*img=software.png*&gt; Software&lt;*/*&gt;")
layer.addDataSet(data2, 0xcc88ff,
    "&lt;*block,valign=absmiddle*&gt;&lt;*img=computer.png*&gt; Hardware&lt;*/*&gt;")

# Use soft lighting effect with light direction from top
layer.setBorderColor(ChartDirector::Transparent, ChartDirector::softLighting(
    ChartDirector::Top))

# Enable data label at the middle of the the bar
layer.setDataLabelStyle().setAlignment(ChartDirector::Center)

# For a vertical stacked chart with positive data only, the last data set is always
# on top. However, in a vertical legend box, the last data set is at the bottom. This
# can be reversed by using the setLegend method.
layer.setLegend(ChartDirector::ReverseLegend)

# Adjust the plot area size, such that the bounding box (inclusive of axes) is 15
# pixels from the left edge, just below the title, 10 pixels to the right of the
# legend box, and 15 pixels from the bottom edge.
c.packPlotArea(15, title.getHeight(), c.layoutLegend().getLeftX() - 10, c.getHeight(
    ) - 15)

# Output the chart
c.makeChart("percentbar.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
