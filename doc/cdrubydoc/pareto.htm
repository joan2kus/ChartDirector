<HTML>
<HEAD>
<Title>Pareto Chart</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Pareto Chart</p>
<hr class="separator">
<div class="content">
<img src="images/pareto.jpg">
<br><br>
This example demonstrates the pareto chart style.<br><br>
A pareto chart is a bar chart with the data sorted in descending order, together with a line chart showing the same data in accumulated form. In the current example, the data is shown as both percentages and values on the two y-axes.<br><br>
The chart in this example is composed of two layers - a <a href="BarLayer.htm">BarLayer</a> created using <a href="XYChart.addBarLayer.htm">XYChart.addBarLayer</a>, and a <a href="LineLayer.htm">LineLayer</a> created using <a href="XYChart.addLineLayer.htm">XYChart.addLineLayer</a>.<br><br>
This example employs the <a href="ArrayMath.htm">ArrayMath</a> utility class for computing the accumulated line, obtaining the scaling factor between the two y-axes, and re-scaling the line data as percentages.<br><br>
The two y-axes are synchronized using <a href="Axis.syncAxis.htm">Axis.syncAxis</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/pareto_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class ParetoController &lt; ApplicationController

    def index()
        @title = "Pareto Chart"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the chart
        data = [40, 15, 7, 5, 2]

        # The labels for the chart
        labels = ["Hard Disk", "PCB", "Printer", "CDROM", "Keyboard"]

        # In the pareto chart, the line data are just the accumulation of the raw data,
        # scaled to a range of 0 - 100%
        lineData = ChartDirector::ArrayMath.new(data)
        lineData.acc()
        scaleFactor = lineData.max() / 100
        if scaleFactor == 0
            # Avoid division by zero error for zero data
            scaleFactor = 1
        end
        lineData.div2(scaleFactor)

        # Create a XYChart object of size 480 x 300 pixels. Set background color to
        # brushed silver, with a grey (bbbbbb) border and 2 pixel 3D raised effect. Use
        # rounded corners. Enable soft drop shadow.
        c = ChartDirector::XYChart.new(400, 300, ChartDirector::brushedSilverColor(),
            0xbbbbbb, 2)
        c.setRoundedFrame()
        c.setDropShadow()

        # Add a title to the chart using 15 points Arial Italic. Set top/bottom margins to
        # 12 pixels.
        title = c.addTitle("Pareto Chart Demonstration", "ariali.ttf", 15)
        title.setMargin2(0, 0, 12, 12)

        # Tentatively set the plotarea at (50, 40). Set the width to 100 pixels less than
        # the chart width, and the height to 80 pixels less than the chart height. Use
        # pale grey (f4f4f4) background, transparent border, and dark grey (444444) dotted
        # grid lines.
        c.setPlotArea(50, 40, c.getWidth() - 100, c.getHeight() - 80, 0xf4f4f4, -1,
            ChartDirector::Transparent, c.dashLineColor(0x444444, ChartDirector::DotLine))

        # Add a line layer for the pareto line
        lineLayer = c.addLineLayer2()

        # Add the pareto line using deep blue (0000ff) as the color, with circle symbols
        lineLayer.addDataSet(lineData.result(), 0x0000ff).setDataSymbol(
            ChartDirector::CircleShape, 9, 0x0000ff, 0x0000ff)

        # Set the line width to 2 pixel
        lineLayer.setLineWidth(2)

        # Bind the line layer to the secondary (right) y-axis.
        lineLayer.setUseYAxis2()

        # Add a multi-color bar layer using the given data.
        barLayer = c.addBarLayer3(data)

        # Set soft lighting for the bars with light direction from the right
        barLayer.setBorderColor(ChartDirector::Transparent, ChartDirector::softLighting(
            ChartDirector::Right))

        # Set the labels on the x axis.
        c.xAxis().setLabels(labels)

        # Set the secondary (right) y-axis scale as 0 - 100 with a tick every 20 units
        c.yAxis2().setLinearScale(0, 100, 20)

        # Set the format of the secondary (right) y-axis label to include a percentage
        # sign
        c.yAxis2().setLabelFormat("{value}%")

        # Set the relationship between the two y-axes, which only differ by a scaling
        # factor
        c.yAxis().syncAxis(c.yAxis2(), scaleFactor)

        # Set the format of the primary y-axis label foramt to show no decimal point
        c.yAxis().setLabelFormat("{value|0}")

        # Add a title to the primary y-axis
        c.yAxis().setTitle("Frequency")

        # Set all axes to transparent
        c.xAxis().setColors(ChartDirector::Transparent)
        c.yAxis().setColors(ChartDirector::Transparent)
        c.yAxis2().setColors(ChartDirector::Transparent)

        # Adjust the plot area size, such that the bounding box (inclusive of axes) is 10
        # pixels from the left edge, just below the title, 10 pixels from the right edge,
        # and 20 pixels from the bottom edge.
        c.packPlotArea(10, title.getHeight(), c.getWidth() - 10, c.getHeight() - 20)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::JPG), :type =&gt; "image/jpeg",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/pareto.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the chart
data = [40, 15, 7, 5, 2]

# The labels for the chart
labels = ["Hard Disk", "PCB", "Printer", "CDROM", "Keyboard"]

# In the pareto chart, the line data are just the accumulation of the raw data,
# scaled to a range of 0 - 100%
lineData = ChartDirector::ArrayMath.new(data)
lineData.acc()
scaleFactor = lineData.max() / 100
if scaleFactor == 0
    # Avoid division by zero error for zero data
    scaleFactor = 1
end
lineData.div2(scaleFactor)

# Create a XYChart object of size 480 x 300 pixels. Set background color to brushed
# silver, with a grey (bbbbbb) border and 2 pixel 3D raised effect. Use rounded
# corners. Enable soft drop shadow.
c = ChartDirector::XYChart.new(400, 300, ChartDirector::brushedSilverColor(),
    0xbbbbbb, 2)
c.setRoundedFrame()
c.setDropShadow()

# Add a title to the chart using 15 points Arial Italic. Set top/bottom margins to 12
# pixels.
title = c.addTitle("Pareto Chart Demonstration", "ariali.ttf", 15)
title.setMargin2(0, 0, 12, 12)

# Tentatively set the plotarea at (50, 40). Set the width to 100 pixels less than the
# chart width, and the height to 80 pixels less than the chart height. Use pale grey
# (f4f4f4) background, transparent border, and dark grey (444444) dotted grid lines.
c.setPlotArea(50, 40, c.getWidth() - 100, c.getHeight() - 80, 0xf4f4f4, -1,
    ChartDirector::Transparent, c.dashLineColor(0x444444, ChartDirector::DotLine))

# Add a line layer for the pareto line
lineLayer = c.addLineLayer2()

# Add the pareto line using deep blue (0000ff) as the color, with circle symbols
lineLayer.addDataSet(lineData.result(), 0x0000ff).setDataSymbol(
    ChartDirector::CircleShape, 9, 0x0000ff, 0x0000ff)

# Set the line width to 2 pixel
lineLayer.setLineWidth(2)

# Bind the line layer to the secondary (right) y-axis.
lineLayer.setUseYAxis2()

# Add a multi-color bar layer using the given data.
barLayer = c.addBarLayer3(data)

# Set soft lighting for the bars with light direction from the right
barLayer.setBorderColor(ChartDirector::Transparent, ChartDirector::softLighting(
    ChartDirector::Right))

# Set the labels on the x axis.
c.xAxis().setLabels(labels)

# Set the secondary (right) y-axis scale as 0 - 100 with a tick every 20 units
c.yAxis2().setLinearScale(0, 100, 20)

# Set the format of the secondary (right) y-axis label to include a percentage sign
c.yAxis2().setLabelFormat("{value}%")

# Set the relationship between the two y-axes, which only differ by a scaling factor
c.yAxis().syncAxis(c.yAxis2(), scaleFactor)

# Set the format of the primary y-axis label foramt to show no decimal point
c.yAxis().setLabelFormat("{value|0}")

# Add a title to the primary y-axis
c.yAxis().setTitle("Frequency")

# Set all axes to transparent
c.xAxis().setColors(ChartDirector::Transparent)
c.yAxis().setColors(ChartDirector::Transparent)
c.yAxis2().setColors(ChartDirector::Transparent)

# Adjust the plot area size, such that the bounding box (inclusive of axes) is 10
# pixels from the left edge, just below the title, 10 pixels from the right edge, and
# 20 pixels from the bottom edge.
c.packPlotArea(10, title.getHeight(), c.getWidth() - 10, c.getHeight() - 20)

# Output the chart
c.makeChart("pareto.jpg")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
