<HTML>
<HEAD>
<Title>Simple Clickable Charts</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">
<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Simple Clickable Charts</p>
<hr class="separator">
<div class="content">In this example, we will create a bar chart that displays the annual revenue of a company for the last 10 years. When a bar is clicked, the browser will load a line chart showing the monthly revenue for the selected year. When the line chart is clicked, the browser will load a pie chart showing the breakdown of the revenue for the selected month. When the pie chart is clicked, it will show the sector details in a web page.<br><br>
The capability is often called "drill-down", because the user can "zoom-in" to get more details by clicking on the chart.
</div><p class="heading1a">Clickable Bar Chart</p><div class="content">
<img src="images/clickbar_doc.png"><br><br>
<b>[Ruby On Rails Version - Controller]</b> app/controllers/clickbar_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class ClickbarController &lt; ApplicationController
    include ChartDirector::InteractiveChartSupport

    def index()
        @ctrl_file = File.expand_path(__FILE__)

        # The data for the bar chart
        data = [450, 560, 630, 800, 1100, 1350, 1600, 1950, 2300, 2700]

        # The labels for the bar chart
        labels = ["1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004",
            "2005"]

        # Create a XYChart object of size 600 x 360 pixels
        c = ChartDirector::XYChart.new(600, 360)

        # Add a title to the chart using 18pts Times Bold Italic font
        c.addTitle("Annual Revenue for Star Tech", "timesbi.ttf", 18)

        # Set the plotarea at (60, 40) and of size 500 x 280 pixels. Use a vertical
        # gradient color from light blue (eeeeff) to deep blue (0000cc) as background. Set
        # border and grid lines to white (ffffff).
        c.setPlotArea(60, 40, 500, 280, c.linearGradientColor(60, 40, 60, 280, 0xeeeeff,
            0x0000cc), -1, 0xffffff, 0xffffff)

        # Add a multi-color bar chart layer using the supplied data. Use soft lighting
        # effect with light direction from top.
        c.addBarLayer3(data).setBorderColor(ChartDirector::Transparent,
            ChartDirector::softLighting(ChartDirector::Top))

        # Set x axis labels using the given labels
        c.xAxis().setLabels(labels)

        # Draw the ticks between label positions (instead of at label positions)
        c.xAxis().setTickOffset(0.5)

        # When auto-scaling, use tick spacing of 40 pixels as a guideline
        c.yAxis().setTickDensity(40)

        # Add a title to the y axis with 12pts Times Bold Italic font
        c.yAxis().setTitle("USD (millions)", "timesbi.ttf", 12)

        # Set axis label style to 8pts Arial Bold
        c.xAxis().setLabelStyle("arialbd.ttf", 8)
        c.yAxis().setLabelStyle("arialbd.ttf", 8)

        # Set axis line width to 2 pixels
        c.xAxis().setWidth(2)
        c.yAxis().setWidth(2)

        # Create the image and save it in a temporary location
        session["chart1"] = c.makeChart2(ChartDirector::PNG)

        # Create an image map for the chart
        @imageMap = c.getHTMLImageMap(url_for(:controller =&gt; "clickline"), "",
            "title='{xLabel}: US$ {value|0}M'")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/clickbar/index.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    Simple Clickable Bar Chart
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;
&lt;div style="font-size:10pt; font-family:verdana; margin-bottom:20"&gt;
    &lt;%= link_to "Source Code Listing",
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;
&lt;img src="&lt;%= url_for(:action =&gt; 'get_session_data', :id =&gt; 'chart1',
    :nocache =&gt; rand) %&gt;" border="0" usemap="#map1"&gt;
&lt;map name="map1"&gt;
&lt;%= @imageMap %&gt;
&lt;/map&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br>
In the above code, the chart is created and saved in a session variable "chart1". An &lt;IMG&gt; tag in the view is used to retrieve the chart using the "get_session_data" action.<br><br>
<div style="background-color:#cccccc;width:99%;padding:5px"><pre>&lt;img src="&lt;%= url_for(:action =&gt; 'get_session_data', :id =&gt; 'chart1',
    :nocache =&gt; rand) %&gt;" border="0" usemap="#map1"&gt;</pre></div><br>
The "get_session_data" action is a ChartDirector utility implemented in the <a href="InteractiveChartSupport.htm">InteractiveChartSupport</a> class. Controllers that need to use session variables for charts should include InteractiveChartSupport as mixin.<br><br>
The image map for the chart is created using the following code:<br><br>
<div style="background-color:#cccccc;width:99%;padding:5px"><pre>@imageMap = c.getHTMLImageMap(url_for(:controller =&gt; "clickline"), "",
    "title='{xLabel}: US$ {value|0}M'")</pre></div><br>
As seen above, only one line of code is needed. <a href="BaseChart.getHTMLImageMap.htm">BaseChart.getHTMLImageMap</a> will generate the image map for the entire chart. The image map will use the "clickline" controller as the handler when a bar is clicked.<br><br>
If you right click on the browser and choose "View Source" to look at the HTML of the web page as received by the browser, you can see that the image map generated above will be something like:<br><br>
<div style="background-color:#cccccc;width:99%;padding:5px"><pre>&lt;area shape="rect" coords="67,278,103,320" title='1996: US$ 450M'
    href="http://chartdirector/clickline?x=0&xLabel=1996&dataSet=0&dataSetName=&value=450"&gt;

&lt;area shape="rect" coords="117,268,153,320" title='1997: US$ 560M'
    href="http://chartdirector/clickline?x=1&xLabel=1997&dataSet=1&dataSetName=&value=560"&gt;

&lt;area shape="rect" coords="167,261,203,320" title='1998: US$ 630M'
    href="http://chartdirector/clickline?x=2&xLabel=1998&dataSet=2&dataSetName=&value=630"&gt;

&lt;area shape="rect" coords="217,245,253,320" title='1999: US$ 800M'
    href="http://chartdirector/clickline?x=3&xLabel=1999&dataSet=3&dataSetName=&value=800"&gt;

...... (one &lt;area&gt; tag for each bar) ......</pre></div><br>
The image map generated by ChartDirector contains one &lt;AREA&gt; tag per bar. This defines the bars as hot spots. The "href" attributes of the &lt;AREA&gt; tags use the "clickline" controller as the URL, with query parameters appended to describe the bars. In this way, the "clickline" controller can distinguish which bar the user has clicked.<br><br>
The &lt;AREA&gt; tags also include "title" attributes, which act as tool tips when the mouse pointer moves over the bars. In this example, the tool tips are in the format:<br><br>
<div style="margin-left:25;font-family:courier new,courier"> "title='{xLabel}: US$ {value|0}M'" </div><br>
which is specified as the third argument of <a href="BaseChart.getHTMLImageMap.htm">BaseChart.getHTMLImageMap</a>.
</div><p class="heading1a">Clickable Line Chart</p><div class="content">
<img src="images/clickline_doc.png"><br><br>
In the previous Clickable Bar Chart sample code, when a bar is clicked, the "clickline" controller will be invoked.<br><br>
The code for the "clickline" controller is listed below. It determines which year the user has clicked from query parameters. It then draws a line chart based on the selected year. To produce a clickable line chart, it generates and saves the chart in a session variable, and generates the image map using <a href="BaseChart.getHTMLImageMap.htm">BaseChart.getHTMLImageMap</a>, with the "clickpie" controller as the handler.<br><br>
As the "clickline" controller is very similar to the "clickbar" controller, it will not be explained further here.<br><br>
<b>[Ruby On Rails Version - Controller]</b> app/controllers/clickline_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class ClicklineController &lt; ApplicationController
    include ChartDirector::InteractiveChartSupport

    def index()
        @ctrl_file = File.expand_path(__FILE__)

        # Get the selected year.
        selectedYear = params["xLabel"]

        #
        # In real life, the data may come from a database based on selectedYear. In this
        # example, we just use a random number generator.
        #
        seed = 50 + (selectedYear.to_i - 1996) * 15
        rantable = ChartDirector::RanTable.new(seed, 1, 12)
        rantable.setCol2(0, seed, -seed * 0.25, seed * 0.33, seed * 0.1, seed * 3)

        data = rantable.getCol(0)

        #
        # Now we obtain the data into arrays, we can start to draw the chart using
        # ChartDirector
        #

        # Create a XYChart object of size 600 x 320 pixels
        c = ChartDirector::XYChart.new(600, 360)

        # Add a title to the chart using 18pts Times Bold Italic font
        c.addTitle(sprintf("Month Revenue for Star Tech for %s", selectedYear),
            "timesbi.ttf", 18)

        # Set the plotarea at (60, 40) and of size 500 x 280 pixels. Use a vertical
        # gradient color from light blue (eeeeff) to deep blue (0000cc) as background. Set
        # border and grid lines to white (ffffff).
        c.setPlotArea(60, 40, 500, 280, c.linearGradientColor(60, 40, 60, 280, 0xeeeeff,
            0x0000cc), -1, 0xffffff, 0xffffff)

        # Add a red line (ff0000) chart layer using the data
        dataSet = c.addLineLayer().addDataSet(data, 0xff0000, "Revenue")

        # Set the line width to 3 pixels
        dataSet.setLineWidth(3)

        # Use a 13 point circle symbol to plot the data points
        dataSet.setDataSymbol(ChartDirector::CircleSymbol, 13)

        # Set the labels on the x axis. In this example, the labels must be Jan - Dec.
        labels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct",
            "Nov", "Dec"]
        c.xAxis().setLabels(labels)

        # When auto-scaling, use tick spacing of 40 pixels as a guideline
        c.yAxis().setTickDensity(40)

        # Add a title to the x axis to reflect the selected year
        c.xAxis().setTitle(sprintf("Year %s", selectedYear), "timesbi.ttf", 12)

        # Add a title to the y axis
        c.yAxis().setTitle("USD (millions)", "timesbi.ttf", 12)

        # Set axis label style to 8pts Arial Bold
        c.xAxis().setLabelStyle("arialbd.ttf", 8)
        c.yAxis().setLabelStyle("arialbd.ttf", 8)

        # Set axis line width to 2 pixels
        c.xAxis().setWidth(2)
        c.yAxis().setWidth(2)

        # Create the image and save it in a temporary location
        session["chart1"] = c.makeChart2(ChartDirector::PNG)

        # Create an image map for the chart
        @imageMap = c.getHTMLImageMap(
            url_for(:controller =&gt; "clickpie", :year =&gt; selectedYear), "",
            "title='{xLabel}: US$ {value|0}M'")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/clickline/index.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    Simple Clickable Line Chart
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;
&lt;div style="font-size:10pt; font-family:verdana; margin-bottom:20"&gt;
    &lt;%= link_to "Source Code Listing",
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;
&lt;img src="&lt;%= url_for(:action =&gt; 'get_session_data', :id =&gt; 'chart1',
    :nocache =&gt; rand) %&gt;" border="0" usemap="#map1"&gt;
&lt;map name="map1"&gt;
&lt;%= @imageMap %&gt;
&lt;/map&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br>
</div><p class="heading1a">Clickable Pie Chart</p><div class="content">
<img src="images/clickpie_doc.png"><br><br>
In the previous Clickable Line Chart sample code, when a line is clicked, the the "clickpie" controller will be invoked.<br><br>
The code for the "clickpie" controller is listed below. It determines which year and month the user has clicked from query parameters. It then draws a pie chart based on those parameters. To produce a clickable pie chart, it generates and saves the chart in a session variable, and generates the image map using <a href="BaseChart.getHTMLImageMap.htm">BaseChart.getHTMLImageMap</a>, with the "piestub" controller as the handler.<br><br>
As the "clickpie" controller is very similar to the "clickbar" controller and the "clickline" controller, it will not be explained further here.<br><br>
<b>[Ruby On Rails Version - Controller]</b> app/controllers/clickpie_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class ClickpieController &lt; ApplicationController
    include ChartDirector::InteractiveChartSupport

    def index()
        @ctrl_file = File.expand_path(__FILE__)

        # Get the selected year and month
        selectedYear = (params["year"]).to_i
        selectedMonth = (params["x"]).to_i + 1

        #
        # In real life, the data may come from a database based on selectedYear. In this
        # example, we just use a random number generator.
        #
        seed = (selectedYear - 1992) * (100 + 3 * selectedMonth)
        rantable = ChartDirector::RanTable.new(seed, 1, 4)
        rantable.setCol(0, seed * 0.003, seed * 0.017)

        data = rantable.getCol(0)

        # The labels for the pie chart
        labels = ["Services", "Hardware", "Software", "Others"]

        # Create a PieChart object of size 600 x 240 pixels
        c = ChartDirector::PieChart.new(600, 280)

        # Set the center of the pie at (300, 140) and the radius to 120 pixels
        c.setPieSize(300, 140, 120)

        # Add a title to the pie chart using 18 pts Times Bold Italic font
        c.addTitle(sprintf("Revenue Breakdown for %s/%s", selectedMonth, selectedYear),
            "timesbi.ttf", 18)

        # Draw the pie in 3D with 20 pixels 3D depth
        c.set3D(20)

        # Set label format to display sector label, value and percentage in two lines
        c.setLabelFormat("{label}&lt;*br*&gt;${value|2}M ({percent}%)")

        # Set label style to 10 pts Arial Bold Italic font. Set background color to the
        # same as the sector color, with reduced-glare glass effect and rounded corners.
        t = c.setLabelStyle("arialbi.ttf", 10)
        t.setBackground(ChartDirector::SameAsMainColor, ChartDirector::Transparent,
            ChartDirector::glassEffect(ChartDirector::ReducedGlare))
        t.setRoundedCorners()

        # Use side label layout method
        c.setLabelLayout(ChartDirector::SideLayout)

        # Set the pie data and the pie labels
        c.setData(data, labels)

        # Create the image and save it in a temporary location
        session["chart1"] = c.makeChart2(ChartDirector::PNG)

        # Create an image map for the chart
        @imageMap = c.getHTMLImageMap(url_for(:controller =&gt; "piestub"), "",
            "title='{label}:US$ {value|2}M'")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/clickpie/index.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    Simple Clickable Pie Chart
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;
&lt;div style="font-size:10pt; font-family:verdana; margin-bottom:20"&gt;
    &lt;%= link_to "Source Code Listing",
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;
&lt;img src="&lt;%= url_for(:action =&gt; 'get_session_data', :id =&gt; 'chart1',
    :nocache =&gt; rand) %&gt;" border="0" usemap="#map1"&gt;
&lt;map name="map1"&gt;
&lt;%= @imageMap %&gt;
&lt;/map&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br>
</div><p class="heading1a">Clickable Pie Chart Handler</p><div class="content">
<img src="images/piestub_doc.png"><br><br>
In the previous Clickable Pie Chart sample code, when a sector is clicked, the "piestub" controller will be invoked. Its code is listed below. In this example, it simply displays some data about the sector clicked.<br><br>
<b>[Ruby On Rails Version - Controller]</b> app/controllers/piestub_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>class PiestubController &lt; ApplicationController
    def index()
        @ctrl_file = File.expand_path(__FILE__)
    end
end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/piestub/index.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    Simple Clickable Pie Chart Handler
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;
&lt;div style="font-size:10pt; font-family:verdana; margin-bottom:20"&gt;
    &lt;%= link_to "Source Code Listing",
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;
&lt;div style="font-size:10pt; font-family:verdana;"&gt;
&lt;b&gt;You have clicked on the following sector :&lt;/b&gt;&lt;br /&gt;
&lt;ul&gt;
    &lt;li&gt;Sector Number : &lt;%= params["sector"] %&gt;&lt;/li&gt;
    &lt;li&gt;Sector Name : &lt;%= params["label"] %&gt;&lt;/li&gt;
    &lt;li&gt;Sector Value : &lt;%= params["value"] %&gt;&lt;/li&gt;
    &lt;li&gt;Sector Percentage : &lt;%= params["percent"] %&gt;%&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table></div><br>
<hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div></body>
</HTML>
