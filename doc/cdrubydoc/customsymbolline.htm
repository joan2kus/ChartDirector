<HTML>
<HEAD>
<Title>Custom Symbols</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Custom Symbols</p>
<hr class="separator">
<div class="content">
<img src="images/customsymbolline.png">
<br><br>
This example demonstrates loading external image files as data symbols by using <a href="DataSet.setDataSymbol2.htm">DataSet.setDataSymbol2</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/customsymbolline_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class CustomsymbollineController &lt; ApplicationController

    def index()
        @title = "Custom Symbols"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the chart
        data0 = [600, 800, 1200, 1500, 1800, 1900, 2000, 1950]
        data1 = [300, 450, 500, 1000, 1500, 1600, 1650, 1600]

        # The labels for the chart
        labels = ["1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002"]

        # Create a XYChart object of size 450 x 250 pixels, with a pale yellow (0xffffc0)
        # background, a black border, and 1 pixel 3D border effect.
        c = ChartDirector::XYChart.new(450, 250, 0xffffc0, 0, 1)

        # Set the plotarea at (60, 45) and of size 360 x 170 pixels, using white
        # (0xffffff) as the plot area background color. Turn on both horizontal and
        # vertical grid lines with light grey color (0xc0c0c0)
        c.setPlotArea(60, 45, 360, 170, 0xffffff, -1, -1, 0xc0c0c0, -1)

        # Add a legend box at (60, 20) (top of the chart) with horizontal layout. Use 8
        # pts Arial Bold font. Set the background and border color to Transparent.
        c.addLegend(60, 20, false, "arialbd.ttf", 8).setBackground(
            ChartDirector::Transparent)

        # Add a title to the chart using 12 pts Arial Bold/white font. Use a 1 x 2 bitmap
        # pattern as the background.
        c.addTitle("Information Resource Usage", "arialbd.ttf", 12, 0xffffff
            ).setBackground(c.patternColor([0x000040, 0x000080], 2))

        # Set the labels on the x axis
        c.xAxis().setLabels(labels)

        # Reserve 8 pixels margins at both side of the x axis to avoid the first and last
        # symbols drawing outside of the plot area
        c.xAxis().setMargin(8, 8)

        # Add a title to the y axis
        c.yAxis().setTitle("Population")

        # Add a line layer to the chart
        layer = c.addLineLayer2()

        # Add the first line using small_user.png as the symbol.
        layer.addDataSet(data0, 0xcf4040, "Users").setDataSymbol2(
            File.dirname(__FILE__) + "/small_user.png")

        # Add the first line using small_computer.png as the symbol.
        layer.addDataSet(data1, 0x40cf40, "Computers").setDataSymbol2(
            File.dirname(__FILE__) + "/small_computer.png")

        # Set the line width to 3 pixels
        layer.setLineWidth(3)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/customsymbolline.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the chart
data0 = [600, 800, 1200, 1500, 1800, 1900, 2000, 1950]
data1 = [300, 450, 500, 1000, 1500, 1600, 1650, 1600]

# The labels for the chart
labels = ["1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002"]

# Create a XYChart object of size 450 x 250 pixels, with a pale yellow (0xffffc0)
# background, a black border, and 1 pixel 3D border effect.
c = ChartDirector::XYChart.new(450, 250, 0xffffc0, 0, 1)

# Set the plotarea at (60, 45) and of size 360 x 170 pixels, using white (0xffffff)
# as the plot area background color. Turn on both horizontal and vertical grid lines
# with light grey color (0xc0c0c0)
c.setPlotArea(60, 45, 360, 170, 0xffffff, -1, -1, 0xc0c0c0, -1)

# Add a legend box at (60, 20) (top of the chart) with horizontal layout. Use 8 pts
# Arial Bold font. Set the background and border color to Transparent.
c.addLegend(60, 20, false, "arialbd.ttf", 8).setBackground(ChartDirector::Transparent
    )

# Add a title to the chart using 12 pts Arial Bold/white font. Use a 1 x 2 bitmap
# pattern as the background.
c.addTitle("Information Resource Usage", "arialbd.ttf", 12, 0xffffff).setBackground(
    c.patternColor([0x000040, 0x000080], 2))

# Set the labels on the x axis
c.xAxis().setLabels(labels)

# Reserve 8 pixels margins at both side of the x axis to avoid the first and last
# symbols drawing outside of the plot area
c.xAxis().setMargin(8, 8)

# Add a title to the y axis
c.yAxis().setTitle("Population")

# Add a line layer to the chart
layer = c.addLineLayer2()

# Add the first line using small_user.png as the symbol.
layer.addDataSet(data0, 0xcf4040, "Users").setDataSymbol2("small_user.png")

# Add the first line using small_computer.png as the symbol.
layer.addDataSet(data1, 0x40cf40, "Computers").setDataSymbol2("small_computer.png")

# Set the line width to 3 pixels
layer.setLineWidth(3)

# Output the chart
c.makeChart("customsymbolline.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
