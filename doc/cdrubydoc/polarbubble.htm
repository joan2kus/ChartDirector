<HTML>
<HEAD>
<Title>Polar Bubble Chart</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Polar Bubble Chart</p>
<hr class="separator">
<div class="content">
<img src="images/polarbubble.png">
<br><br>
This example demonstrates how to create polar bubble charts. It also demonstrates using alternating background colors along the radial direction.<br><br>
A polar bubble chart can be created as a polar line chart with circles as data symbols. The line width is set to 0, so only the symbols can be seen. The symbol sizes are then controlled using another data series. This will create the effects of a bubble chart.<br><br>
The detail steps are:<br><br>
<ul><li> Create a polar line layer using <a href="PolarChart.addLineLayer.htm">PolarChart.addLineLayer</a>.<br><br>
<li> Enable data symbols for the line using <a href="PolarLayer.setDataSymbol.htm">PolarLayer.setDataSymbol</a> (or <a href="PolarLayer.setDataSymbol2.htm">PolarLayer.setDataSymbol2</a> or <a href="PolarLayer.setDataSymbol3.htm">PolarLayer.setDataSymbol3</a> or <a href="PolarLayer.setDataSymbol4.htm">PolarLayer.setDataSymbol4</a>). ChartDirector supports using arbitrary shapes as bubbles, although traditionally, circles are used.<br><br>
<li> Disable the line by setting its width to 0 using <a href="PolarLayer.setLineWidth.htm">PolarLayer.setLineWidth</a>.<br><br>
<li> Control the size of the symbols by a data series using <a href="PolarLayer.setSymbolScale.htm">PolarLayer.setSymbolScale</a>.</ul>
Note that in this example, the polar plot area uses two alternating background colors along the radial direction. This is by using <a href="PolarChart.setPlotAreaBg.htm">PolarChart.setPlotAreaBg</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/polarbubble_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class PolarbubbleController &lt; ApplicationController

    def index()
        @title = "Polar Bubble Chart"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the chart
        data0 = [6, 12.5, 18.2, 15]
        angles0 = [45, 96, 169, 258]
        size0 = [41, 105, 12, 20]

        data1 = [18, 16, 11, 14]
        angles1 = [30, 210, 240, 310]
        size1 = [30, 45, 12, 90]

        # Create a PolarChart object of size 460 x 460 pixels
        c = ChartDirector::PolarChart.new(460, 460)

        # Add a title to the chart at the top left corner using 15pts Arial Bold Italic
        # font
        c.addTitle2(ChartDirector::TopLeft, "&lt;*underline=2*&gt;EM Field Strength",
            "arialbi.ttf", 15)

        # Set center of plot area at (230, 240) with radius 180 pixels
        c.setPlotArea(230, 240, 180)

        # Use alternative light grey/dark grey circular background color
        c.setPlotAreaBg(0xdddddd, 0xeeeeee)

        # Set the grid style to circular grid
        c.setGridStyle(false)

        # Add a legend box at the top right corner of the chart using 9 pts Arial Bold
        # font
        c.addLegend(459, 0, true, "arialbd.ttf", 9).setAlignment(ChartDirector::TopRight)

        # Set angular axis as 0 - 360, with a spoke every 30 units
        c.angularAxis().setLinearScale(0, 360, 30)

        # Set the radial axis label format
        c.radialAxis().setLabelFormat("{value} km")

        # Add a blue (0x9999ff) line layer to the chart using (data0, angle0)
        layer0 = c.addLineLayer(data0, 0x9999ff, "Cold Spot")
        layer0.setAngles(angles0)

        # Disable the line by setting its width to 0, so only the symbols are visible
        layer0.setLineWidth(0)

        # Use a circular data point symbol
        layer0.setDataSymbol(ChartDirector::CircleSymbol, 11)

        # Modulate the symbol size by size0 to produce a bubble chart effect
        layer0.setSymbolScale(size0)

        # Add a red (0xff9999) line layer to the chart using (data1, angle1)
        layer1 = c.addLineLayer(data1, 0xff9999, "Hot Spot")
        layer1.setAngles(angles1)

        # Disable the line by setting its width to 0, so only the symbols are visible
        layer1.setLineWidth(0)

        # Use a circular data point symbol
        layer1.setDataSymbol(ChartDirector::CircleSymbol, 11)

        # Modulate the symbol size by size1 to produce a bubble chart effect
        layer1.setSymbolScale(size1)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/polarbubble.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the chart
data0 = [6, 12.5, 18.2, 15]
angles0 = [45, 96, 169, 258]
size0 = [41, 105, 12, 20]

data1 = [18, 16, 11, 14]
angles1 = [30, 210, 240, 310]
size1 = [30, 45, 12, 90]

# Create a PolarChart object of size 460 x 460 pixels
c = ChartDirector::PolarChart.new(460, 460)

# Add a title to the chart at the top left corner using 15pts Arial Bold Italic font
c.addTitle2(ChartDirector::TopLeft, "&lt;*underline=2*&gt;EM Field Strength",
    "arialbi.ttf", 15)

# Set center of plot area at (230, 240) with radius 180 pixels
c.setPlotArea(230, 240, 180)

# Use alternative light grey/dark grey circular background color
c.setPlotAreaBg(0xdddddd, 0xeeeeee)

# Set the grid style to circular grid
c.setGridStyle(false)

# Add a legend box at the top right corner of the chart using 9 pts Arial Bold font
c.addLegend(459, 0, true, "arialbd.ttf", 9).setAlignment(ChartDirector::TopRight)

# Set angular axis as 0 - 360, with a spoke every 30 units
c.angularAxis().setLinearScale(0, 360, 30)

# Set the radial axis label format
c.radialAxis().setLabelFormat("{value} km")

# Add a blue (0x9999ff) line layer to the chart using (data0, angle0)
layer0 = c.addLineLayer(data0, 0x9999ff, "Cold Spot")
layer0.setAngles(angles0)

# Disable the line by setting its width to 0, so only the symbols are visible
layer0.setLineWidth(0)

# Use a circular data point symbol
layer0.setDataSymbol(ChartDirector::CircleSymbol, 11)

# Modulate the symbol size by size0 to produce a bubble chart effect
layer0.setSymbolScale(size0)

# Add a red (0xff9999) line layer to the chart using (data1, angle1)
layer1 = c.addLineLayer(data1, 0xff9999, "Hot Spot")
layer1.setAngles(angles1)

# Disable the line by setting its width to 0, so only the symbols are visible
layer1.setLineWidth(0)

# Use a circular data point symbol
layer1.setDataSymbol(ChartDirector::CircleSymbol, 11)

# Modulate the symbol size by size1 to produce a bubble chart effect
layer1.setSymbolScale(size1)

# Output the chart
c.makeChart("polarbubble.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
