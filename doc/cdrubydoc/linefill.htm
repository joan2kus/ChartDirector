<HTML>
<HEAD>
<Title>Inter-Line Coloring</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Inter-Line Coloring</p>
<hr class="separator">
<div class="content">
<img src="images/linefill.png">
<br><br>
This example demonstrates filling the area between two lines or curves.<br><br>
In ChartDirector, an <a href="InterLineLayer.htm">InterLineLayer</a> can be used to fill the region between any two lines. The lines can be from a <a href="LineLayer.htm">LineLayer</a>, <a href="StepLineLayer.htm">StepLineLayer</a>, <a href="SplineLayer.htm">SplineLayer</a>, <a href="TrendLayer.htm">TrendLayer</a>, or from an axis <a href="Mark.htm">Mark</a>. Two colors can be used for filling, depending on which line is on top.<br><br>
In this example, an InterLineLayer is used to fill the region between a normal line and a spline curve. Another InterLineLayer is used to fill the region between a normal line and a mark line. The fill color differs depending on which line is on top.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/linefill_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class LinefillController &lt; ApplicationController

    def index()
        @title = "Inter-Line Coloring"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the line chart
        data0 = [70, 73, 80, 90, 95, 93, 82, 77, 82, 101, 111, 115]
        data1 = [90, 96, 89, 77, 82, 96, 109, 109, 99, 108, 96, 91]
        data2 = [58, 34, 25, 49, 64, 10, 16, 40, 25, 49, 40, 22]

        # The labels for the line chart
        labels = ["2008-01", "2008-02", "2008-03", "2008-04", "2008-05", "2008-06",
            "2008-07", "2008-08", "2008-09", "2008-10", "2008-11", "2008-12"]

        # Create a XYChart object of size 450 x 450 pixels
        c = ChartDirector::XYChart.new(450, 450)

        # Add a title to the chart using 15 pts Arial Italic font.
        title = c.addTitle("Inter-line Coloring", "ariali.ttf", 15)

        # Add a legend box where the top-center is anchored to the horizontal center of
        # the chart, just under the title. Use horizontal layout and 10 points Arial Bold
        # font, and transparent background and border. Use line style legend key.
        legendBox = c.addLegend(c.getWidth() / 2, title.getHeight(), false, "arialbi.ttf",
            10)
        legendBox.setBackground(ChartDirector::Transparent, ChartDirector::Transparent)
        legendBox.setAlignment(ChartDirector::TopCenter)
        legendBox.setLineStyleKey()

        # Tentatively set the plotarea at (70, 65) and of (chart_width - 100) x
        # (chart_height - 110) in size. Use light grey (c0c0c0) border and horizontal and
        # vertical grid lines.
        plotArea = c.setPlotArea(70, 65, c.getWidth() - 100, c.getHeight() - 110, -1, -1,
            0xc0c0c0, 0xc0c0c0, -1)

        # Add a title to the y axis using 12 pts Arial Bold Italic font
        c.yAxis().setTitle("Axis Title Placeholder", "arialbi.ttf", 12)

        # Add a title to the x axis using 12 pts Arial Bold Italic font
        c.xAxis().setTitle("Axis Title Placeholder", "arialbi.ttf", 12)

        # Set the axes line width to 3 pixels
        c.xAxis().setWidth(3)
        c.yAxis().setWidth(3)

        # Set the labels on the x axis.
        c.xAxis().setLabels(labels)

        # Use 8 points Arial rotated by 90 degrees as the x-axis label font
        c.xAxis().setLabelStyle("Arial", 8, ChartDirector::TextColor, 90)

        # Add a spline curve to the chart
        layer0 = c.addSplineLayer(data0, 0xff0000, "Data Set 0")
        layer0.setLineWidth(2)

        # Add a normal line to the chart
        layer1 = c.addLineLayer(data1, 0x008800, "Data Set 1")
        layer1.setLineWidth(2)

        # Color the region between the above spline curve and normal line. Use the
        # semi-transparent red (80ff000000) if the spline curve is higher than the normal
        # line, otherwise use semi-transparent green (80008800)
        c.addInterLineLayer(layer0.getLine(), layer1.getLine(), 0x80ff0000, 0x80008800)

        # Add another normal line to the chart
        layer2 = c.addLineLayer(data2, 0x0000ff, "Data Set 2")
        layer2.setLineWidth(2)

        # Add a horizontal mark line to the chart at y = 40
        mark = c.yAxis().addMark(40, -1, "Threshold")
        mark.setLineWidth(2)

        # Set the mark line to purple (880088) dash line. Use white (ffffff) for the mark
        # label.
        mark.setMarkColor(c.dashLineColor(0x880088), 0xffffff)

        # Put the mark label at the left side of the mark, with a purple (880088)
        # background.
        mark.setAlignment(ChartDirector::Left)
        mark.setBackground(0x880088)

        # Color the region between the above normal line and mark line. Use the
        # semi-transparent blue (800000ff) if the normal line is higher than the mark
        # line, otherwise use semi-transparent purple (80880088)
        c.addInterLineLayer(layer2.getLine(), mark.getLine(), 0x800000ff, 0x80880088)

        # Layout the legend box, so we can get its height
        c.layoutLegend()

        # Adjust the plot area size, such that the bounding box (inclusive of axes) is 10
        # pixels from the left edge, just under the legend box, 25 pixels from the right
        # edge, and 10 pixels from the bottom edge.
        c.packPlotArea(10, legendBox.getTopY() + legendBox.getHeight(), c.getWidth() - 25,
            c.getHeight() - 10)

        # After determining the exact plot area position, we may adjust the legend box and
        # the title positions so that they are centered relative to the plot area (instead
        # of the chart)
        legendBox.setPos(plotArea.getLeftX() + (plotArea.getWidth() - legendBox.getWidth()
            ) / 2, legendBox.getTopY())
        title.setPos(plotArea.getLeftX() + (plotArea.getWidth() - title.getWidth()) / 2,
            title.getTopY())

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/linefill.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the line chart
data0 = [70, 73, 80, 90, 95, 93, 82, 77, 82, 101, 111, 115]
data1 = [90, 96, 89, 77, 82, 96, 109, 109, 99, 108, 96, 91]
data2 = [58, 34, 25, 49, 64, 10, 16, 40, 25, 49, 40, 22]

# The labels for the line chart
labels = ["2008-01", "2008-02", "2008-03", "2008-04", "2008-05", "2008-06",
    "2008-07", "2008-08", "2008-09", "2008-10", "2008-11", "2008-12"]

# Create a XYChart object of size 450 x 450 pixels
c = ChartDirector::XYChart.new(450, 450)

# Add a title to the chart using 15 pts Arial Italic font.
title = c.addTitle("Inter-line Coloring", "ariali.ttf", 15)

# Add a legend box where the top-center is anchored to the horizontal center of the
# chart, just under the title. Use horizontal layout and 10 points Arial Bold font,
# and transparent background and border. Use line style legend key.
legendBox = c.addLegend(c.getWidth() / 2, title.getHeight(), false, "arialbi.ttf", 10
    )
legendBox.setBackground(ChartDirector::Transparent, ChartDirector::Transparent)
legendBox.setAlignment(ChartDirector::TopCenter)
legendBox.setLineStyleKey()

# Tentatively set the plotarea at (70, 65) and of (chart_width - 100) x (chart_height
# - 110) in size. Use light grey (c0c0c0) border and horizontal and vertical grid
# lines.
plotArea = c.setPlotArea(70, 65, c.getWidth() - 100, c.getHeight() - 110, -1, -1,
    0xc0c0c0, 0xc0c0c0, -1)

# Add a title to the y axis using 12 pts Arial Bold Italic font
c.yAxis().setTitle("Axis Title Placeholder", "arialbi.ttf", 12)

# Add a title to the x axis using 12 pts Arial Bold Italic font
c.xAxis().setTitle("Axis Title Placeholder", "arialbi.ttf", 12)

# Set the axes line width to 3 pixels
c.xAxis().setWidth(3)
c.yAxis().setWidth(3)

# Set the labels on the x axis.
c.xAxis().setLabels(labels)

# Use 8 points Arial rotated by 90 degrees as the x-axis label font
c.xAxis().setLabelStyle("Arial", 8, ChartDirector::TextColor, 90)

# Add a spline curve to the chart
layer0 = c.addSplineLayer(data0, 0xff0000, "Data Set 0")
layer0.setLineWidth(2)

# Add a normal line to the chart
layer1 = c.addLineLayer(data1, 0x008800, "Data Set 1")
layer1.setLineWidth(2)

# Color the region between the above spline curve and normal line. Use the
# semi-transparent red (80ff000000) if the spline curve is higher than the normal
# line, otherwise use semi-transparent green (80008800)
c.addInterLineLayer(layer0.getLine(), layer1.getLine(), 0x80ff0000, 0x80008800)

# Add another normal line to the chart
layer2 = c.addLineLayer(data2, 0x0000ff, "Data Set 2")
layer2.setLineWidth(2)

# Add a horizontal mark line to the chart at y = 40
mark = c.yAxis().addMark(40, -1, "Threshold")
mark.setLineWidth(2)

# Set the mark line to purple (880088) dash line. Use white (ffffff) for the mark
# label.
mark.setMarkColor(c.dashLineColor(0x880088), 0xffffff)

# Put the mark label at the left side of the mark, with a purple (880088) background.
mark.setAlignment(ChartDirector::Left)
mark.setBackground(0x880088)

# Color the region between the above normal line and mark line. Use the
# semi-transparent blue (800000ff) if the normal line is higher than the mark line,
# otherwise use semi-transparent purple (80880088)
c.addInterLineLayer(layer2.getLine(), mark.getLine(), 0x800000ff, 0x80880088)

# Layout the legend box, so we can get its height
c.layoutLegend()

# Adjust the plot area size, such that the bounding box (inclusive of axes) is 10
# pixels from the left edge, just under the legend box, 25 pixels from the right
# edge, and 10 pixels from the bottom edge.
c.packPlotArea(10, legendBox.getTopY() + legendBox.getHeight(), c.getWidth() - 25,
    c.getHeight() - 10)

# After determining the exact plot area position, we may adjust the legend box and
# the title positions so that they are centered relative to the plot area (instead of
# the chart)
legendBox.setPos(plotArea.getLeftX() + (plotArea.getWidth() - legendBox.getWidth()
    ) / 2, legendBox.getTopY())
title.setPos(plotArea.getLeftX() + (plotArea.getWidth() - title.getWidth()) / 2,
    title.getTopY())

# Output the chart
c.makeChart("linefill.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
