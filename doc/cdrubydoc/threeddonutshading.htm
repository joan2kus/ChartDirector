<HTML>
<HEAD>
<Title>3D Donut Shading</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">3D Donut Shading</p>
<hr class="separator">
<div class="content">
<img src="images/threeddonutshading0.png">&nbsp;&nbsp;<img src="images/threeddonutshading1.png">&nbsp;&nbsp;<img src="images/threeddonutshading2.png">&nbsp;&nbsp;<img src="images/threeddonutshading3.png">&nbsp;&nbsp;<img src="images/threeddonutshading4.png">&nbsp;&nbsp;<img src="images/threeddonutshading5.png">&nbsp;&nbsp;<img src="images/threeddonutshading6.png">&nbsp;&nbsp;<img src="images/threeddonutshading7.png">
<br><br>
This example demonstrates various sector shading effects applicable to 3D donut charts.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/threeddonutshading_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class ThreeddonutshadingController &lt; ApplicationController

    def index()
        @title = "3D Donut Shading"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 8
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the pie chart
        data = [18, 30, 20, 15]

        # The colors to use for the sectors
        colors = [0x66aaee, 0xeebb22, 0xbbbbbb, 0x8844ff]

        # Create a PieChart object of size 200 x 200 pixels. Use a vertical gradient color
        # from blue (0000cc) to deep blue (000044) as background. Use rounded corners of
        # 16 pixels radius.
        c = ChartDirector::PieChart.new(200, 200)
        c.setBackground(c.linearGradientColor(0, 0, 0, c.getHeight(), 0x0000cc, 0x000044))
        c.setRoundedFrame(0xffffff, 16)

        # Set donut center at (100, 100), and outer/inner radii as 80/40 pixels
        c.setDonutSize(100, 100, 80, 40)

        # Set the pie data
        c.setData(data)

        # Set the sector colors
        c.setColors2(ChartDirector::DataColor, colors)

        # Draw the pie in 3D with a pie thickness of 20 pixels
        c.set3D(20)

        # Demonstrates various shading modes
        if params["img"] == "0"
            c.addTitle("Default Shading", "bold", 12, 0xffffff)
        elsif params["img"] == "1"
            c.addTitle("Flat Gradient", "bold", 12, 0xffffff)
            c.setSectorStyle(ChartDirector::FlatShading)
        elsif params["img"] == "2"
            c.addTitle("Local Gradient", "bold", 12, 0xffffff)
            c.setSectorStyle(ChartDirector::LocalGradientShading)
        elsif params["img"] == "3"
            c.addTitle("Global Gradient", "bold", 12, 0xffffff)
            c.setSectorStyle(ChartDirector::GlobalGradientShading)
        elsif params["img"] == "4"
            c.addTitle("Concave Shading", "bold", 12, 0xffffff)
            c.setSectorStyle(ChartDirector::ConcaveShading)
        elsif params["img"] == "5"
            c.addTitle("Rounded Edge", "bold", 12, 0xffffff)
            c.setSectorStyle(ChartDirector::RoundedEdgeShading)
        elsif params["img"] == "6"
            c.addTitle("Radial Gradient", "bold", 12, 0xffffff)
            c.setSectorStyle(ChartDirector::RadialShading)
        elsif params["img"] == "7"
            c.addTitle("Ring Shading", "bold", 12, 0xffffff)
            c.setSectorStyle(ChartDirector::RingShading)
        end

        # Disable the sector labels by setting the color to Transparent
        c.setLabelStyle("", 8, ChartDirector::Transparent)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/threeddonutshading.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

def createChart(img)

    # The data for the pie chart
    data = [18, 30, 20, 15]

    # The colors to use for the sectors
    colors = [0x66aaee, 0xeebb22, 0xbbbbbb, 0x8844ff]

    # Create a PieChart object of size 200 x 200 pixels. Use a vertical gradient
    # color from blue (0000cc) to deep blue (000044) as background. Use rounded
    # corners of 16 pixels radius.
    c = ChartDirector::PieChart.new(200, 200)
    c.setBackground(c.linearGradientColor(0, 0, 0, c.getHeight(), 0x0000cc, 0x000044)
        )
    c.setRoundedFrame(0xffffff, 16)

    # Set donut center at (100, 100), and outer/inner radii as 80/40 pixels
    c.setDonutSize(100, 100, 80, 40)

    # Set the pie data
    c.setData(data)

    # Set the sector colors
    c.setColors2(ChartDirector::DataColor, colors)

    # Draw the pie in 3D with a pie thickness of 20 pixels
    c.set3D(20)

    # Demonstrates various shading modes
    if img == "0"
        c.addTitle("Default Shading", "bold", 12, 0xffffff)
    elsif img == "1"
        c.addTitle("Flat Gradient", "bold", 12, 0xffffff)
        c.setSectorStyle(ChartDirector::FlatShading)
    elsif img == "2"
        c.addTitle("Local Gradient", "bold", 12, 0xffffff)
        c.setSectorStyle(ChartDirector::LocalGradientShading)
    elsif img == "3"
        c.addTitle("Global Gradient", "bold", 12, 0xffffff)
        c.setSectorStyle(ChartDirector::GlobalGradientShading)
    elsif img == "4"
        c.addTitle("Concave Shading", "bold", 12, 0xffffff)
        c.setSectorStyle(ChartDirector::ConcaveShading)
    elsif img == "5"
        c.addTitle("Rounded Edge", "bold", 12, 0xffffff)
        c.setSectorStyle(ChartDirector::RoundedEdgeShading)
    elsif img == "6"
        c.addTitle("Radial Gradient", "bold", 12, 0xffffff)
        c.setSectorStyle(ChartDirector::RadialShading)
    elsif img == "7"
        c.addTitle("Ring Shading", "bold", 12, 0xffffff)
        c.setSectorStyle(ChartDirector::RingShading)
    end

    # Disable the sector labels by setting the color to Transparent
    c.setLabelStyle("", 8, ChartDirector::Transparent)

    # Output the chart
    c.makeChart("threeddonutshading%s.png" % img)
end

createChart("0")
createChart("1")
createChart("2")
createChart("3")
createChart("4")
createChart("5")
createChart("6")
createChart("7")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
