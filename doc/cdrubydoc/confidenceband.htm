<HTML>
<HEAD>
<Title>Confidence Band</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Confidence Band</p>
<hr class="separator">
<div class="content">
<img src="images/confidenceband.png">
<br><br>
This example demonstrates adding confidence bands to a trend line. It also demonstrates how to display linear regression parameters on the chart.<br><br>
In linear regression, the data points are assumed to be related by:<br><br>
<div style="margin-left:25;font-family:courier new,courier"> y = m * x + c + err </div><br>
where m and c are constants, and err is a random variable. Linear regression estimates m, c and err based on available data.<br><br>
As m and c are estimated values, the trend line y = m * x + c may be inaccurate. In ChartDirector, the uncertainties can be represented as a confidence band using <a href="TrendLayer.addConfidenceBand.htm">TrendLayer.addConfidenceBand</a>. For example, the 95% confidence band means there are 95% probability that the "real" trend line is in that band.<br><br>
To predict a data point (infer y given x), we use y = m * x + c + err. As m, c and err are estimated values, the predicted data point may be inaccurate. In ChartDirector, the uncertainties can be represented as a prediction band using <a href="TrendLayer.addPredictionBand.htm">TrendLayer.addPredictionBand</a>.<br><br>
Note that the prediction band is always wider than the confidence band because of the extra uncertainties contributed by the err term.<br><br>
In ChartDirector, the linear regression parameters slope, intercept, correlation coefficient and standard error can be obtained by using <a href="TrendLayer.getSlope.htm">TrendLayer.getSlope</a>, <a href="TrendLayer.getIntercept.htm">TrendLayer.getIntercept</a>, <a href="TrendLayer.getCorrelation.htm">TrendLayer.getCorrelation</a> and <a href="TrendLayer.getStdError.htm">TrendLayer.getStdError</a>. (Please refer to appropriate statistics text books for explanation of these values.)<br><br>
In this example, the linear regression parameters are formatted into a table using <a href="cdml.htm">CDML</a>, which is then added to the chart as custom text box using <a href="BaseChart.addText.htm">BaseChart.addText</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/confidenceband_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class ConfidencebandController &lt; ApplicationController

    def index()
        @title = "Confidence Band"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The XY data of the first data series
        dataX = [50, 55, 37, 24, 42, 49, 63, 72, 83, 59]
        dataY = [3.6, 2.8, 2.5, 2.3, 3.8, 3.0, 3.8, 5.0, 6.0, 3.3]

        # Create a XYChart object of size 450 x 420 pixels
        c = ChartDirector::XYChart.new(450, 420)

        # Set the plotarea at (55, 65) and of size 350 x 300 pixels, with white background
        # and a light grey border (0xc0c0c0). Turn on both horizontal and vertical grid
        # lines with light grey color (0xc0c0c0)
        c.setPlotArea(55, 65, 350, 300, 0xffffff, -1, 0xc0c0c0, 0xc0c0c0, -1)

        # Add a title to the chart using 18 point Times Bold Itatic font.
        c.addTitle("Server Performance", "timesbi.ttf", 18)

        # Add titles to the axes using 12 pts Arial Bold Italic font
        c.yAxis().setTitle("Response Time (sec)", "arialbi.ttf", 12)
        c.xAxis().setTitle("Server Load (TPS)", "arialbi.ttf", 12)

        # Set the axes line width to 3 pixels
        c.yAxis().setWidth(3)
        c.xAxis().setWidth(3)

        # Add a scatter layer using (dataX, dataY)
        c.addScatterLayer(dataX, dataY, "", ChartDirector::DiamondSymbol, 11, 0x008000)

        # Add a trend line layer for (dataX, dataY)
        trendLayer = c.addTrendLayer2(dataX, dataY, 0x008000)

        # Set the line width to 3 pixels
        trendLayer.setLineWidth(3)

        # Add a 95% confidence band for the line
        trendLayer.addConfidenceBand(0.95, 0x806666ff)

        # Add a 95% confidence band (prediction band) for the points
        trendLayer.addPredictionBand(0.95, 0x8066ff66)

        # Add a legend box at (50, 30) (top of the chart) with horizontal layout. Use 10
        # pts Arial Bold Italic font. Set the background and border color to Transparent.
        legendBox = c.addLegend(50, 30, false, "arialbi.ttf", 10)
        legendBox.setBackground(ChartDirector::Transparent)

        # Add entries to the legend box
        legendBox.addKey("95% Line Confidence", 0x806666ff)
        legendBox.addKey("95% Point Confidence", 0x8066ff66)

        # Display the trend line parameters as a text table formatted using CDML
        textbox = c.addText(56, 65, sprintf(
            "&lt;*block*&gt;Slope\nIntercept\nCorrelation\nStd Error&lt;*/*&gt;   &lt;*block*&gt;%.4f " \
            "sec/tps\n%.4f sec\n%.4f\n%.4f sec&lt;*/*&gt;", trendLayer.getSlope(),
            trendLayer.getIntercept(), trendLayer.getCorrelation(),
            trendLayer.getStdError()), "arialbd.ttf", 8)

        # Set the background of the text box to light grey, with a black border, and 1
        # pixel 3D border
        textbox.setBackground(0xc0c0c0, 0, 1)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/confidenceband.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The XY data of the first data series
dataX = [50, 55, 37, 24, 42, 49, 63, 72, 83, 59]
dataY = [3.6, 2.8, 2.5, 2.3, 3.8, 3.0, 3.8, 5.0, 6.0, 3.3]

# Create a XYChart object of size 450 x 420 pixels
c = ChartDirector::XYChart.new(450, 420)

# Set the plotarea at (55, 65) and of size 350 x 300 pixels, with white background
# and a light grey border (0xc0c0c0). Turn on both horizontal and vertical grid lines
# with light grey color (0xc0c0c0)
c.setPlotArea(55, 65, 350, 300, 0xffffff, -1, 0xc0c0c0, 0xc0c0c0, -1)

# Add a title to the chart using 18 point Times Bold Itatic font.
c.addTitle("Server Performance", "timesbi.ttf", 18)

# Add titles to the axes using 12 pts Arial Bold Italic font
c.yAxis().setTitle("Response Time (sec)", "arialbi.ttf", 12)
c.xAxis().setTitle("Server Load (TPS)", "arialbi.ttf", 12)

# Set the axes line width to 3 pixels
c.yAxis().setWidth(3)
c.xAxis().setWidth(3)

# Add a scatter layer using (dataX, dataY)
c.addScatterLayer(dataX, dataY, "", ChartDirector::DiamondSymbol, 11, 0x008000)

# Add a trend line layer for (dataX, dataY)
trendLayer = c.addTrendLayer2(dataX, dataY, 0x008000)

# Set the line width to 3 pixels
trendLayer.setLineWidth(3)

# Add a 95% confidence band for the line
trendLayer.addConfidenceBand(0.95, 0x806666ff)

# Add a 95% confidence band (prediction band) for the points
trendLayer.addPredictionBand(0.95, 0x8066ff66)

# Add a legend box at (50, 30) (top of the chart) with horizontal layout. Use 10 pts
# Arial Bold Italic font. Set the background and border color to Transparent.
legendBox = c.addLegend(50, 30, false, "arialbi.ttf", 10)
legendBox.setBackground(ChartDirector::Transparent)

# Add entries to the legend box
legendBox.addKey("95% Line Confidence", 0x806666ff)
legendBox.addKey("95% Point Confidence", 0x8066ff66)

# Display the trend line parameters as a text table formatted using CDML
textbox = c.addText(56, 65, sprintf(
    "&lt;*block*&gt;Slope\nIntercept\nCorrelation\nStd Error&lt;*/*&gt;   &lt;*block*&gt;%.4f " \
    "sec/tps\n%.4f sec\n%.4f\n%.4f sec&lt;*/*&gt;", trendLayer.getSlope(),
    trendLayer.getIntercept(), trendLayer.getCorrelation(), trendLayer.getStdError()
    ), "arialbd.ttf", 8)

# Set the background of the text box to light grey, with a black border, and 1 pixel
# 3D border
textbox.setBackground(0xc0c0c0, 0, 1)

# Output the chart
c.makeChart("confidenceband.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
