<HTML>
<HEAD>
<Title>Bars with Marks</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Bars with Marks</p>
<hr class="separator">
<div class="content">
<img src="images/markbar.png">
<br><br>
This example demonstrates combine a bar layer with a box-whisker layer to create bars with marks. It also demonstrates gradient background color, rounded frame, soft drop shadow, and automatic resizing of the plot area to fit the chart.<br><br>
<ul><li> The gradient background is achieved by using <a href="BaseChart.linearGradientColor.htm">BaseChart.linearGradientColor</a> to define the gradient color, then use <a href="BaseChart.setBackground.htm">BaseChart.setBackground</a> to set it as the chart background color.<br><br>
<li> The rounded frame is configured using <a href="BaseChart.setRoundedFrame.htm">BaseChart.setRoundedFrame</a>.<br><br>
<li> The soft drop shadow is configured using <a href="BaseChart.setDropShadow.htm">BaseChart.setDropShadow</a>.<br><br>
<li> The box-whisker layer is created using <a href="XYChart.addBoxWhiskerLayer.htm">XYChart.addBoxWhiskerLayer</a>. Only the middle data set is used, so the box- whisker symbol appears as a mark line. <a href="BaseBoxLayer.setDataGap.htm">BaseBoxLayer.setDataGap</a> is used to reduce the horizontal gap between the box- whisker symbols, so as to make the mark lines wider than the bars.<br><br>
<li> The bar layer is created using <a href="XYChart.addBarLayer.htm">XYChart.addBarLayer</a>.<br><br>
<li> The soft lighting effect of the bars is defined using <a href="ChartDirector.softLighting.htm">ChartDirector.softLighting</a>, then applied to the bars using <a href="Layer.setBorderColor.htm">Layer.setBorderColor</a>.<br><br>
<li> After the entire chart is configured, the <a href="XYChart.packPlotArea.htm">XYChart.packPlotArea</a> method is used  to adjust the plot area size, so as to fit the plot area and the axes in a given  bounding box.</ul>
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/markbar_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class MarkbarController &lt; ApplicationController

    def index()
        @title = "Bars with Marks"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the bars and the marks
        barData = [100, 125, 245, 147, 67, 96, 160, 145, 97, 167, 220, 125]
        markData = [85, 156, 220, 120, 80, 110, 140, 130, 111, 180, 175, 100]

        # The labels for the bar chart
        labels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct",
            "Nov", "Dec"]

        # Create a XYChart object of size 480 x 360 pixels. Use a vertical gradient color
        # from pale blue (e8f0f8) to sky blue (aaccff) spanning half the chart height as
        # background. Set border to blue (88aaee). Use rounded corners. Enable soft drop
        # shadow.
        c = ChartDirector::XYChart.new(480, 360)
        c.setBackground(c.linearGradientColor(0, 0, 0, c.getHeight() / 2, 0xe8f0f8,
            0xaaccff), 0x88aaee)
        c.setRoundedFrame()
        c.setDropShadow()

        # Add a title to the chart using 15 points Arial Italic font. Set top/bottom
        # margins to 12 pixels.
        title = c.addTitle("Bars with Marks Demonstration", "ariali.ttf", 15)
        title.setMargin2(0, 0, 12, 12)

        # Tentatively set the plotarea to 50 pixels from the left edge to allow for the
        # y-axis, and to just under the title. Set the width to 65 pixels less than the
        # chart width, and the height to reserve 90 pixels at the bottom for the x-axis
        # and the legend box. Use pale blue (e8f0f8) background, transparent border, and
        # grey (888888) dotted horizontal grid lines.
        c.setPlotArea(50, title.getHeight(), c.getWidth() - 65, c.getHeight(
            ) - title.getHeight() - 90, 0xe8f0f8, -1, ChartDirector::Transparent,
            c.dashLineColor(0x888888, ChartDirector::DotLine))

        # Add a legend box where the bottom-center is anchored to the 15 pixels above the
        # bottom-center of the chart. Use horizontal layout and 8 points Arial font.
        legendBox = c.addLegend(c.getWidth() / 2, c.getHeight() - 15, false, "arial.ttf",
            8)
        legendBox.setAlignment(ChartDirector::BottomCenter)

        # Set the legend box background and border to pale blue (e8f0f8) and bluish grey
        # (445566)
        legendBox.setBackground(0xe8f0f8, 0x445566)

        # Use rounded corners of 5 pixel radius for the legend box
        legendBox.setRoundedCorners(5)

        # Use line style legend key
        legendBox.setLineStyleKey()

        # Set axes to transparent
        c.xAxis().setColors(ChartDirector::Transparent)
        c.yAxis().setColors(ChartDirector::Transparent)

        # Set the labels on the x axis
        c.xAxis().setLabels(labels)

        # Add a box-whisker layer with just the middle mark visible for the marks. Use red
        # (ff0000) color for the mark, with a line width of 2 pixels and 10% horizontal
        # gap
        markLayer = c.addBoxWhiskerLayer(nil, nil, nil, nil, markData, -1, 0xff0000)
        markLayer.setLineWidth(2)
        markLayer.setDataGap(0.1)

        # Add the legend key for the mark line
        legendBox.addKey("Target", 0xff0000, 2)

        # Add a blue (0066cc) bar layer using the given data.
        barLayer = c.addBarLayer(barData, 0x0066cc, "Actual")

        # Use soft lighting effect for the bars with light direction from left.
        barLayer.setBorderColor(ChartDirector::Transparent, ChartDirector::softLighting(
            ChartDirector::Left))

        # Adjust the plot area size, such that the bounding box (inclusive of axes) is 10
        # pixels from the left edge, just below the title, 15 pixels from the right edge,
        # and 10 pixels above the legend box.
        c.packPlotArea(10, title.getHeight(), c.getWidth() - 15, c.layoutLegend().getTopY(
            ) - 10)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/markbar.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the bars and the marks
barData = [100, 125, 245, 147, 67, 96, 160, 145, 97, 167, 220, 125]
markData = [85, 156, 220, 120, 80, 110, 140, 130, 111, 180, 175, 100]

# The labels for the bar chart
labels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct",
    "Nov", "Dec"]

# Create a XYChart object of size 480 x 360 pixels. Use a vertical gradient color
# from pale blue (e8f0f8) to sky blue (aaccff) spanning half the chart height as
# background. Set border to blue (88aaee). Use rounded corners. Enable soft drop
# shadow.
c = ChartDirector::XYChart.new(480, 360)
c.setBackground(c.linearGradientColor(0, 0, 0, c.getHeight() / 2, 0xe8f0f8, 0xaaccff
    ), 0x88aaee)
c.setRoundedFrame()
c.setDropShadow()

# Add a title to the chart using 15 points Arial Italic font. Set top/bottom margins
# to 12 pixels.
title = c.addTitle("Bars with Marks Demonstration", "ariali.ttf", 15)
title.setMargin2(0, 0, 12, 12)

# Tentatively set the plotarea to 50 pixels from the left edge to allow for the
# y-axis, and to just under the title. Set the width to 65 pixels less than the chart
# width, and the height to reserve 90 pixels at the bottom for the x-axis and the
# legend box. Use pale blue (e8f0f8) background, transparent border, and grey
# (888888) dotted horizontal grid lines.
c.setPlotArea(50, title.getHeight(), c.getWidth() - 65, c.getHeight(
    ) - title.getHeight() - 90, 0xe8f0f8, -1, ChartDirector::Transparent,
    c.dashLineColor(0x888888, ChartDirector::DotLine))

# Add a legend box where the bottom-center is anchored to the 15 pixels above the
# bottom-center of the chart. Use horizontal layout and 8 points Arial font.
legendBox = c.addLegend(c.getWidth() / 2, c.getHeight() - 15, false, "arial.ttf", 8)
legendBox.setAlignment(ChartDirector::BottomCenter)

# Set the legend box background and border to pale blue (e8f0f8) and bluish grey
# (445566)
legendBox.setBackground(0xe8f0f8, 0x445566)

# Use rounded corners of 5 pixel radius for the legend box
legendBox.setRoundedCorners(5)

# Use line style legend key
legendBox.setLineStyleKey()

# Set axes to transparent
c.xAxis().setColors(ChartDirector::Transparent)
c.yAxis().setColors(ChartDirector::Transparent)

# Set the labels on the x axis
c.xAxis().setLabels(labels)

# Add a box-whisker layer with just the middle mark visible for the marks. Use red
# (ff0000) color for the mark, with a line width of 2 pixels and 10% horizontal gap
markLayer = c.addBoxWhiskerLayer(nil, nil, nil, nil, markData, -1, 0xff0000)
markLayer.setLineWidth(2)
markLayer.setDataGap(0.1)

# Add the legend key for the mark line
legendBox.addKey("Target", 0xff0000, 2)

# Add a blue (0066cc) bar layer using the given data.
barLayer = c.addBarLayer(barData, 0x0066cc, "Actual")

# Use soft lighting effect for the bars with light direction from left.
barLayer.setBorderColor(ChartDirector::Transparent, ChartDirector::softLighting(
    ChartDirector::Left))

# Adjust the plot area size, such that the bounding box (inclusive of axes) is 10
# pixels from the left edge, just below the title, 15 pixels from the right edge, and
# 10 pixels above the legend box.
c.packPlotArea(10, title.getHeight(), c.getWidth() - 15, c.layoutLegend().getTopY(
    ) - 10)

# Output the chart
c.makeChart("markbar.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
