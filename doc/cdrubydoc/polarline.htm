<HTML>
<HEAD>
<Title>Polar Line Chart</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Polar Line Chart</p>
<hr class="separator">
<div class="content">
<img src="images/polarline.png">
<br><br>
This example demonstrates a polar line chart, completed with data symbols and data labels.<br><br>
<ul><li> The grid lines in this example is circular (instead of polygonal as is in <a href="simpleradar.htm">Simple Radar Chart</a>). This is configured using <a href="PolarChart.setGridStyle.htm">PolarChart.setGridStyle</a>.<br><br>
<li> The angular scale in this example is set to 0 - 360, with spokes every 30 units. This is by using <a href="AngularAxis.setLinearScale.htm">AngularAxis.setLinearScale</a>.<br><br>
<li> The two lines in this example is added using <a href="PolarChart.addLineLayer.htm">PolarChart.addLineLayer</a> with angular coordinates of the points provided by <a href="PolarLayer.setAngles.htm">PolarLayer.setAngles</a>.<br><br>
<li> The data symbols are enabled using <a href="PolarLayer.setDataSymbol.htm">PolarLayer.setDataSymbol</a>.<br><br>
<li> The data labels are configured using <a href="PolarLayer.setDataLabelFormat.htm">PolarLayer.setDataLabelFormat</a> to consist of the radial and angular coordinates.<br><br>
<li> The data label background colors and 3D borders are configured using <a href="PolarLayer.setDataLabelStyle.htm">PolarLayer.setDataLabelStyle</a> and <a href="Box.setBackground.htm">Box.setBackground</a>.<br><br>
<li> Note that the blue line in this example is a closed loop (the default), while the red is not a loop. This is configured by using <a href="PolarLineLayer.setCloseLoop.htm">PolarLineLayer.setCloseLoop</a>.</ul>
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/polarline_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class PolarlineController &lt; ApplicationController

    def index()
        @title = "Polar Line Chart"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the chart
        data0 = [90, 25, 40, 55, 68, 44, 79, 85, 50]
        angles0 = [15, 60, 110, 180, 230, 260, 260, 310, 340]

        data1 = [80, 91, 66, 80, 92, 87]
        angles1 = [40, 65, 88, 110, 150, 200]

        # Create a PolarChart object of size 460 x 500 pixels, with a grey (e0e0e0)
        # background and 1 pixel 3D border
        c = ChartDirector::PolarChart.new(460, 500, 0xe0e0e0, 0x000000, 1)

        # Add a title to the chart at the top left corner using 15pts Arial Bold Italic
        # font. Use a wood pattern as the title background.
        c.addTitle("Polar Line Chart Demo", "arialbi.ttf", 15).setBackground(
            c.patternColor(File.dirname(__FILE__) + "/wood.png"))

        # Set center of plot area at (230, 280) with radius 180 pixels, and white (ffffff)
        # background.
        c.setPlotArea(230, 280, 180, 0xffffff)

        # Set the grid style to circular grid, with grids below the chart layers
        c.setGridStyle(false, false)

        # Add a legend box at top-center of plot area (230, 35) using horizontal layout.
        # Use 10 pts Arial Bold font, with 1 pixel 3D border effect.
        b = c.addLegend(230, 35, false, "arialbd.ttf", 9)
        b.setAlignment(ChartDirector::TopCenter)
        b.setBackground(ChartDirector::Transparent, ChartDirector::Transparent, 1)

        # Set angular axis as 0 - 360, with a spoke every 30 units
        c.angularAxis().setLinearScale(0, 360, 30)

        # Add a blue (0xff) line layer to the chart using (data0, angle0)
        layer0 = c.addLineLayer(data0, 0x0000ff, "Close Loop Line")
        layer0.setAngles(angles0)

        # Set the line width to 2 pixels
        layer0.setLineWidth(2)

        # Use 11 pixel triangle symbols for the data points
        layer0.setDataSymbol(ChartDirector::TriangleSymbol, 11)

        # Enable data label and set its format
        layer0.setDataLabelFormat("({value},{angle})")

        # Set the data label text box with light blue (0x9999ff) backgruond color and 1
        # pixel 3D border effect
        layer0.setDataLabelStyle().setBackground(0x9999ff, ChartDirector::Transparent, 1)

        # Add a red (0xff0000) line layer to the chart using (data1, angle1)
        layer1 = c.addLineLayer(data1, 0xff0000, "Open Loop Line")
        layer1.setAngles(angles1)

        # Set the line width to 2 pixels
        layer1.setLineWidth(2)

        # Use 11 pixel diamond symbols for the data points
        layer1.setDataSymbol(ChartDirector::DiamondSymbol, 11)

        # Set the line to open loop
        layer1.setCloseLoop(false)

        # Enable data label and set its format
        layer1.setDataLabelFormat("({value},{angle})")

        # Set the data label text box with light red (0xff9999) backgruond color and 1
        # pixel 3D border effect
        layer1.setDataLabelStyle().setBackground(0xff9999, ChartDirector::Transparent, 1)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/polarline.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the chart
data0 = [90, 25, 40, 55, 68, 44, 79, 85, 50]
angles0 = [15, 60, 110, 180, 230, 260, 260, 310, 340]

data1 = [80, 91, 66, 80, 92, 87]
angles1 = [40, 65, 88, 110, 150, 200]

# Create a PolarChart object of size 460 x 500 pixels, with a grey (e0e0e0)
# background and 1 pixel 3D border
c = ChartDirector::PolarChart.new(460, 500, 0xe0e0e0, 0x000000, 1)

# Add a title to the chart at the top left corner using 15pts Arial Bold Italic font.
# Use a wood pattern as the title background.
c.addTitle("Polar Line Chart Demo", "arialbi.ttf", 15).setBackground(c.patternColor(
    "wood.png"))

# Set center of plot area at (230, 280) with radius 180 pixels, and white (ffffff)
# background.
c.setPlotArea(230, 280, 180, 0xffffff)

# Set the grid style to circular grid, with grids below the chart layers
c.setGridStyle(false, false)

# Add a legend box at top-center of plot area (230, 35) using horizontal layout. Use
# 10 pts Arial Bold font, with 1 pixel 3D border effect.
b = c.addLegend(230, 35, false, "arialbd.ttf", 9)
b.setAlignment(ChartDirector::TopCenter)
b.setBackground(ChartDirector::Transparent, ChartDirector::Transparent, 1)

# Set angular axis as 0 - 360, with a spoke every 30 units
c.angularAxis().setLinearScale(0, 360, 30)

# Add a blue (0xff) line layer to the chart using (data0, angle0)
layer0 = c.addLineLayer(data0, 0x0000ff, "Close Loop Line")
layer0.setAngles(angles0)

# Set the line width to 2 pixels
layer0.setLineWidth(2)

# Use 11 pixel triangle symbols for the data points
layer0.setDataSymbol(ChartDirector::TriangleSymbol, 11)

# Enable data label and set its format
layer0.setDataLabelFormat("({value},{angle})")

# Set the data label text box with light blue (0x9999ff) backgruond color and 1 pixel
# 3D border effect
layer0.setDataLabelStyle().setBackground(0x9999ff, ChartDirector::Transparent, 1)

# Add a red (0xff0000) line layer to the chart using (data1, angle1)
layer1 = c.addLineLayer(data1, 0xff0000, "Open Loop Line")
layer1.setAngles(angles1)

# Set the line width to 2 pixels
layer1.setLineWidth(2)

# Use 11 pixel diamond symbols for the data points
layer1.setDataSymbol(ChartDirector::DiamondSymbol, 11)

# Set the line to open loop
layer1.setCloseLoop(false)

# Enable data label and set its format
layer1.setDataLabelFormat("({value},{angle})")

# Set the data label text box with light red (0xff9999) backgruond color and 1 pixel
# 3D border effect
layer1.setDataLabelStyle().setBackground(0xff9999, ChartDirector::Transparent, 1)

# Output the chart
c.makeChart("polarline.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
