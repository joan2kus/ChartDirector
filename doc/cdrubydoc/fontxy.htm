<HTML>
<HEAD>
<Title>Text Styles and Colors (2)</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Text Styles and Colors (2)</p>
<hr class="separator">
<div class="content">
<img src="images/fontxy.png">
<br><br>
This example demonstrates controlling text style and colors in various text containing objects (chart and axis titles, axis labels, legend keys, data labels, etc).<br><br>
The chart title, y-axis title, y-axis labels, x-axis labels, legend keys, and the data labels are configured with different fonts and colors, and have different background and 3D border effects. The y-axis labels are appended with "Mbytes" as the unit. The x-axis labels are rotated 45 degrees.<br><br>
Note that since ChartDirector Ver 3.0, you may use <a href="cdml.htm">CDML</a> to produce more sophisticated formatting effects than demonstrated in this example.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/fontxy_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class FontxyController &lt; ApplicationController

    def index()
        @title = "Text Style and Colors"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the chart
        data0 = [100, 125, 245, 147, 67]
        data1 = [85, 156, 179, 211, 123]
        data2 = [97, 87, 56, 267, 157]
        labels = ["Mon Jun 4", "Tue Jun 5", "Wed Jun 6", "Thu Jun 7", "Fri Jun 8"]

        # Create a XYChart object of size 540 x 350 pixels
        c = ChartDirector::XYChart.new(540, 350)

        # Set the plot area to start at (120, 40) and of size 280 x 240 pixels
        c.setPlotArea(120, 40, 280, 240)

        # Add a title to the chart using 20 pts Times Bold Italic (timesbi.ttf) font and
        # using a deep blue color (0x000080)
        c.addTitle("Weekly Server Load", "timesbi.ttf", 20, 0x000080)

        # Add a legend box at (420, 100) (right of plot area) using 12 pts Times Bold
        # font. Sets the background of the legend box to light grey 0xd0d0d0 with a 1
        # pixel 3D border.
        c.addLegend(420, 100, true, "timesbd.ttf", 12).setBackground(0xd0d0d0, 0xd0d0d0, 1
            )

        # Add a title to the y-axis using 12 pts Arial Bold/deep blue (0x000080) font. Set
        # the background to yellow (0xffff00) with a 2 pixel 3D border.
        c.yAxis().setTitle("Throughput (per hour)", "arialbd.ttf", 12, 0x000080
            ).setBackground(0xffff00, 0xffff00, 2)

        # Use 10 pts Arial Bold/orange (0xcc6600) font for the y axis labels
        c.yAxis().setLabelStyle("arialbd.ttf", 10, 0xcc6600)

        # Set the axis label format to "nnn MBytes"
        c.yAxis().setLabelFormat("{value} MBytes")

        # Use 10 pts Arial Bold/green (0x008000) font for the x axis labels. Set the label
        # angle to 45 degrees.
        c.xAxis().setLabelStyle("arialbd.ttf", 10, 0x008000).setFontAngle(45)

        # Set the labels on the x axis.
        c.xAxis().setLabels(labels)

        # Add a 3D stack bar layer with a 3D depth of 5 pixels
        layer = c.addBarLayer2(ChartDirector::Stack, 5)

        # Use Arial Italic as the default data label font in the bars
        layer.setDataLabelStyle("ariali.ttf")

        # Use 10 pts Times Bold Italic (timesbi.ttf) as the aggregate label font. Set the
        # background to flesh (0xffcc66) color with a 1 pixel 3D border.
        layer.setAggregateLabelStyle("timesbi.ttf", 10).setBackground(0xffcc66,
            ChartDirector::Transparent, 1)

        # Add the first data set to the stacked bar layer
        layer.addDataSet(data0, -1, "Server #1")

        # Add the second data set to the stacked bar layer
        layer.addDataSet(data1, -1, "Server #2")

        # Add the third data set to the stacked bar layer, and set its data label font to
        # Arial Bold Italic.
        textbox = layer.addDataSet(data2, -1, "Server #3").setDataLabelStyle("arialbi.ttf"
            )

        # Set the data label font color for the third data set to yellow (0xffff00)
        textbox.setFontColor(0xffff00)

        # Set the data label background color to the same color as the bar segment, with a
        # 1 pixel 3D border.
        textbox.setBackground(ChartDirector::SameAsMainColor, ChartDirector::Transparent,
            1)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/fontxy.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the chart
data0 = [100, 125, 245, 147, 67]
data1 = [85, 156, 179, 211, 123]
data2 = [97, 87, 56, 267, 157]
labels = ["Mon Jun 4", "Tue Jun 5", "Wed Jun 6", "Thu Jun 7", "Fri Jun 8"]

# Create a XYChart object of size 540 x 350 pixels
c = ChartDirector::XYChart.new(540, 350)

# Set the plot area to start at (120, 40) and of size 280 x 240 pixels
c.setPlotArea(120, 40, 280, 240)

# Add a title to the chart using 20 pts Times Bold Italic (timesbi.ttf) font and
# using a deep blue color (0x000080)
c.addTitle("Weekly Server Load", "timesbi.ttf", 20, 0x000080)

# Add a legend box at (420, 100) (right of plot area) using 12 pts Times Bold font.
# Sets the background of the legend box to light grey 0xd0d0d0 with a 1 pixel 3D
# border.
c.addLegend(420, 100, true, "timesbd.ttf", 12).setBackground(0xd0d0d0, 0xd0d0d0, 1)

# Add a title to the y-axis using 12 pts Arial Bold/deep blue (0x000080) font. Set
# the background to yellow (0xffff00) with a 2 pixel 3D border.
c.yAxis().setTitle("Throughput (per hour)", "arialbd.ttf", 12, 0x000080
    ).setBackground(0xffff00, 0xffff00, 2)

# Use 10 pts Arial Bold/orange (0xcc6600) font for the y axis labels
c.yAxis().setLabelStyle("arialbd.ttf", 10, 0xcc6600)

# Set the axis label format to "nnn MBytes"
c.yAxis().setLabelFormat("{value} MBytes")

# Use 10 pts Arial Bold/green (0x008000) font for the x axis labels. Set the label
# angle to 45 degrees.
c.xAxis().setLabelStyle("arialbd.ttf", 10, 0x008000).setFontAngle(45)

# Set the labels on the x axis.
c.xAxis().setLabels(labels)

# Add a 3D stack bar layer with a 3D depth of 5 pixels
layer = c.addBarLayer2(ChartDirector::Stack, 5)

# Use Arial Italic as the default data label font in the bars
layer.setDataLabelStyle("ariali.ttf")

# Use 10 pts Times Bold Italic (timesbi.ttf) as the aggregate label font. Set the
# background to flesh (0xffcc66) color with a 1 pixel 3D border.
layer.setAggregateLabelStyle("timesbi.ttf", 10).setBackground(0xffcc66,
    ChartDirector::Transparent, 1)

# Add the first data set to the stacked bar layer
layer.addDataSet(data0, -1, "Server #1")

# Add the second data set to the stacked bar layer
layer.addDataSet(data1, -1, "Server #2")

# Add the third data set to the stacked bar layer, and set its data label font to
# Arial Bold Italic.
textbox = layer.addDataSet(data2, -1, "Server #3").setDataLabelStyle("arialbi.ttf")

# Set the data label font color for the third data set to yellow (0xffff00)
textbox.setFontColor(0xffff00)

# Set the data label background color to the same color as the bar segment, with a 1
# pixel 3D border.
textbox.setBackground(ChartDirector::SameAsMainColor, ChartDirector::Transparent, 1)

# Output the chart
c.makeChart("fontxy.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
