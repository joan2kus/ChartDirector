<HTML>
<HEAD>
<Title>Round Meter</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Round Meter</p>
<hr class="separator">
<div class="content">
<img src="images/roundmeter.png">
<br><br>
This example demonstrates a round meter.<br><br>
This example is similar to the <a href="semicirclemeter.htm">Semi-Circle Meter</a> example, but with the angular range set to much wider. There are also more chart formatting and decorations.<br><br>
First, a basic angular meter is created using the following steps:<br><br>
<ul><li> Create an <a href="AngularMeter.htm">AngularMeter</a> object using <a href="AngularMeter.AngularMeter.htm">AngularMeter.AngularMeter</a>. In this example, the background color is set to silver using <a href="ChartDirector.silverColor.htm">ChartDirector.silverColor</a> and the meter border is set to have a depressed effect.<br><br>
<li> Specify the orientation of the meter using <a href="AngularMeter.setMeter.htm">AngularMeter.setMeter</a>. This specifies the center, the radius, and the angular span of the meter.<br><br>
<li> Set the numeric scale of the meter using <a href="BaseMeter.setScale.htm">BaseMeter.setScale</a><br><br>
<li> Add a pointer to the meter using <a href="BaseMeter.addPointer.htm">BaseMeter.addPointer</a></ul>
Then more formatting and decorations are added. In this example, the following features are used:<br><br>
<ul><li> Define zones on the meter using <a href="AngularMeter.addZone.htm">AngularMeter.addZone</a>. In this example, 3 zones (red, yellow and green) are defined.<br><br>
<li> Add arbitrary text boxes to the meter using <a href="BaseChart.addText.htm">BaseChart.addText</a>. In this example, a text box is added to label the meter as "CPU", and another text box is added to display the data value as text.<br><br>
<li> Set the scale and tick and line widths with <a href="BaseMeter.setLineWidth.htm">BaseMeter.setLineWidth</a>. The meter scale line is disabled by setting its line width to 0 (note there is no arc along the scale). The major tick width is set to 2 pixels, so the major ticks are thicker than the minor ticks.<br><br>
<li> Add a light blue ring to encircle the meter using <a href="AngularMeter.addRing.htm">AngularMeter.addRing</a>.<br><br>
<li> Add a metallic blue circle as the meter face using <a href="AngularMeter.addRing.htm">AngularMeter.addRing</a>.</ul>
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/roundmeter_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class RoundmeterController &lt; ApplicationController

    def index()
        @title = "Round Meter"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The value to display on the meter
        value = 45.17

        # Create an AugularMeter object of size 200 x 200 pixels, with silver background,
        # black border, 2 pixel 3D depressed border and rounded corners.
        m = ChartDirector::AngularMeter.new(200, 200, ChartDirector::silverColor(),
            0x000000, -2)
        m.setRoundedFrame()

        # Set the meter center at (100, 100), with radius 85 pixels, and span from -135 to
        # +135 degress
        m.setMeter(100, 100, 85, -135, 135)

        # Meter scale is 0 - 100, with major tick every 10 units, minor tick every 5
        # units, and micro tick every 1 units
        m.setScale(0, 100, 10, 5, 1)

        # Disable default angular arc by setting its width to 0. Set 2 pixels line width
        # for major tick, and 1 pixel line width for minor ticks.
        m.setLineWidth(0, 2, 1)

        # Set the circular meter surface as metallic blue (9999DD)
        m.addRing(0, 90, ChartDirector::metalColor(0x9999dd))

        # Add a blue (6666FF) ring between radii 88 - 90 as decoration
        m.addRing(88, 90, 0x6666ff)

        # Set 0 - 60 as green (99FF99) zone, 60 - 80 as yellow (FFFF00) zone, and 80 - 100
        # as red (FF3333) zone
        m.addZone(0, 60, 0x99ff99)
        m.addZone(60, 80, 0xffff00)
        m.addZone(80, 100, 0xff3333)

        # Add a text label centered at (100, 135) with 15 pts Arial Bold font
        m.addText(100, 135, "CPU", "arialbd.ttf", 15, ChartDirector::TextColor,
            ChartDirector::Center)

        # Add a text box centered at (100, 165) showing the value formatted to 2 decimal
        # places, using white text on a black background, and with 1 pixel 3D depressed
        # border
        m.addText(100, 165, m.formatValue(value, "2"), "Arial", 8, 0xffffff,
            ChartDirector::Center).setBackground(0x000000, 0x000000, -1)

        # Add a semi-transparent blue (40333399) pointer at the specified value
        m.addPointer(value, 0x40333399)

        # Output the chart
        send_data(m.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/roundmeter.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The value to display on the meter
value = 45.17

# Create an AugularMeter object of size 200 x 200 pixels, with silver background,
# black border, 2 pixel 3D depressed border and rounded corners.
m = ChartDirector::AngularMeter.new(200, 200, ChartDirector::silverColor(), 0x000000,
    -2)
m.setRoundedFrame()

# Set the meter center at (100, 100), with radius 85 pixels, and span from -135 to
# +135 degress
m.setMeter(100, 100, 85, -135, 135)

# Meter scale is 0 - 100, with major tick every 10 units, minor tick every 5 units,
# and micro tick every 1 units
m.setScale(0, 100, 10, 5, 1)

# Disable default angular arc by setting its width to 0. Set 2 pixels line width for
# major tick, and 1 pixel line width for minor ticks.
m.setLineWidth(0, 2, 1)

# Set the circular meter surface as metallic blue (9999DD)
m.addRing(0, 90, ChartDirector::metalColor(0x9999dd))

# Add a blue (6666FF) ring between radii 88 - 90 as decoration
m.addRing(88, 90, 0x6666ff)

# Set 0 - 60 as green (99FF99) zone, 60 - 80 as yellow (FFFF00) zone, and 80 - 100 as
# red (FF3333) zone
m.addZone(0, 60, 0x99ff99)
m.addZone(60, 80, 0xffff00)
m.addZone(80, 100, 0xff3333)

# Add a text label centered at (100, 135) with 15 pts Arial Bold font
m.addText(100, 135, "CPU", "arialbd.ttf", 15, ChartDirector::TextColor,
    ChartDirector::Center)

# Add a text box centered at (100, 165) showing the value formatted to 2 decimal
# places, using white text on a black background, and with 1 pixel 3D depressed
# border
m.addText(100, 165, m.formatValue(value, "2"), "Arial", 8, 0xffffff,
    ChartDirector::Center).setBackground(0x000000, 0x000000, -1)

# Add a semi-transparent blue (40333399) pointer at the specified value
m.addPointer(value, 0x40333399)

# Output the chart
m.makeChart("roundmeter.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
