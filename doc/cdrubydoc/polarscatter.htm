<HTML>
<HEAD>
<Title>Polar Scatter Chart</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Polar Scatter Chart</p>
<hr class="separator">
<div class="content">
<img src="images/polarscatter.png">
<br><br>
This example demonstrates how to create polar scatter charts. It also demonstrates using alternating background colors along the angular direction.<br><br>
A polar scatter chart can be created as a polar line chart with data symbols. The line width is set to 0, so only the symbols can be seen. This will create the effects of a scatter chart.<br><br>
The detail steps are:<br><br>
<ul><li> Create a polar line layer using <a href="PolarChart.addLineLayer.htm">PolarChart.addLineLayer</a>.<br><br>
<li> Enable data symbols for the line using <a href="PolarLayer.setDataSymbol.htm">PolarLayer.setDataSymbol</a> (or <a href="PolarLayer.setDataSymbol2.htm">PolarLayer.setDataSymbol2</a> or <a href="PolarLayer.setDataSymbol3.htm">PolarLayer.setDataSymbol3</a> or <a href="PolarLayer.setDataSymbol4.htm">PolarLayer.setDataSymbol4</a>).<br><br>
<li> Disable the line by setting its width to 0 using <a href="PolarLayer.setLineWidth.htm">PolarLayer.setLineWidth</a>.</ul>
Note that in this example, the polar plot area uses two alternating background colors along the angular direction. This is by using <a href="PolarChart.setPlotAreaBg.htm">PolarChart.setPlotAreaBg</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/polarscatter_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class PolarscatterController &lt; ApplicationController

    def index()
        @title = "Polar Scatter Chart"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the chart
        data0 = [43, 89, 76, 64, 48, 18, 92, 68, 44, 79, 71, 85]
        angles0 = [45, 96, 169, 258, 15, 30, 330, 260, 60, 75, 110, 140]

        data1 = [50, 91, 26, 29, 80, 53, 62, 87, 19, 40]
        angles1 = [230, 210, 240, 310, 179, 250, 244, 199, 89, 160]

        data2 = [88, 65, 76, 49, 80, 53]
        angles2 = [340, 310, 340, 210, 30, 300]

        # The labels on the angular axis (spokes)
        labels = ["North", "North\nEast", "East", "South\nEast", "South", "South\nWest",
            "West", "North\nWest"]

        # Create a PolarChart object of size 460 x 460 pixels
        c = ChartDirector::PolarChart.new(460, 460)

        # Add a title to the chart at the top left corner using 15pts Arial Bold Italic
        # font
        c.addTitle2(ChartDirector::TopLeft, "&lt;*underline=2*&gt;Plants in Wonderland",
            "arialbi.ttf", 15)

        # Set center of plot area at (230, 240) with radius 180 pixels
        c.setPlotArea(230, 240, 180)

        # Use alternative light grey/dark grey sector background color
        c.setPlotAreaBg(0xdddddd, 0xeeeeee, false)

        # Set the grid style to circular grid
        c.setGridStyle(false)

        # Add a legend box at the top right corner of the chart using 9 pts Arial Bold
        # font
        c.addLegend(459, 0, true, "arialbd.ttf", 9).setAlignment(ChartDirector::TopRight)

        # Set angular axis as 0 - 360, either 8 spokes
        c.angularAxis().setLinearScale2(0, 360, labels)

        # Set the radial axis label format
        c.radialAxis().setLabelFormat("{value} km")

        # Add a blue (0xff) polar line layer to the chart using (data0, angle0)
        layer0 = c.addLineLayer(data0, 0x0000ff, "Immortal Weed")
        layer0.setAngles(angles0)

        layer0.setLineWidth(0)
        layer0.setDataSymbol(ChartDirector::TriangleSymbol, 11)

        # Add a red (0xff0000) polar line layer to the chart using (data1, angles1)
        layer1 = c.addLineLayer(data1, 0xff0000, "Precious Flower")
        layer1.setAngles(angles1)

        # Disable the line by setting its width to 0, so only the symbols are visible
        layer1.setLineWidth(0)

        # Use a 11 pixel diamond data point symbol
        layer1.setDataSymbol(ChartDirector::DiamondSymbol, 11)

        # Add a green (0x00ff00) polar line layer to the chart using (data2, angles2)
        layer2 = c.addLineLayer(data2, 0x00ff00, "Magical Tree")
        layer2.setAngles(angles2)

        # Disable the line by setting its width to 0, so only the symbols are visible
        layer2.setLineWidth(0)

        # Use a 9 pixel square data point symbol
        layer2.setDataSymbol(ChartDirector::SquareSymbol, 9)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/polarscatter.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the chart
data0 = [43, 89, 76, 64, 48, 18, 92, 68, 44, 79, 71, 85]
angles0 = [45, 96, 169, 258, 15, 30, 330, 260, 60, 75, 110, 140]

data1 = [50, 91, 26, 29, 80, 53, 62, 87, 19, 40]
angles1 = [230, 210, 240, 310, 179, 250, 244, 199, 89, 160]

data2 = [88, 65, 76, 49, 80, 53]
angles2 = [340, 310, 340, 210, 30, 300]

# The labels on the angular axis (spokes)
labels = ["North", "North\nEast", "East", "South\nEast", "South", "South\nWest",
    "West", "North\nWest"]

# Create a PolarChart object of size 460 x 460 pixels
c = ChartDirector::PolarChart.new(460, 460)

# Add a title to the chart at the top left corner using 15pts Arial Bold Italic font
c.addTitle2(ChartDirector::TopLeft, "&lt;*underline=2*&gt;Plants in Wonderland",
    "arialbi.ttf", 15)

# Set center of plot area at (230, 240) with radius 180 pixels
c.setPlotArea(230, 240, 180)

# Use alternative light grey/dark grey sector background color
c.setPlotAreaBg(0xdddddd, 0xeeeeee, false)

# Set the grid style to circular grid
c.setGridStyle(false)

# Add a legend box at the top right corner of the chart using 9 pts Arial Bold font
c.addLegend(459, 0, true, "arialbd.ttf", 9).setAlignment(ChartDirector::TopRight)

# Set angular axis as 0 - 360, either 8 spokes
c.angularAxis().setLinearScale2(0, 360, labels)

# Set the radial axis label format
c.radialAxis().setLabelFormat("{value} km")

# Add a blue (0xff) polar line layer to the chart using (data0, angle0)
layer0 = c.addLineLayer(data0, 0x0000ff, "Immortal Weed")
layer0.setAngles(angles0)

layer0.setLineWidth(0)
layer0.setDataSymbol(ChartDirector::TriangleSymbol, 11)

# Add a red (0xff0000) polar line layer to the chart using (data1, angles1)
layer1 = c.addLineLayer(data1, 0xff0000, "Precious Flower")
layer1.setAngles(angles1)

# Disable the line by setting its width to 0, so only the symbols are visible
layer1.setLineWidth(0)

# Use a 11 pixel diamond data point symbol
layer1.setDataSymbol(ChartDirector::DiamondSymbol, 11)

# Add a green (0x00ff00) polar line layer to the chart using (data2, angles2)
layer2 = c.addLineLayer(data2, 0x00ff00, "Magical Tree")
layer2.setAngles(angles2)

# Disable the line by setting its width to 0, so only the symbols are visible
layer2.setLineWidth(0)

# Use a 9 pixel square data point symbol
layer2.setDataSymbol(ChartDirector::SquareSymbol, 9)

# Output the chart
c.makeChart("polarscatter.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
