<HTML>
<HEAD>
<Title>Data Table (1)</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Data Table (1)</p>
<hr class="separator">
<div class="content">
<img src="images/datatable.png">
<br><br>
This example demonstrates putting a data table under the x-axis.<br><br>
In ChartDirector, the labels in a label based x-axis (that is, axis configured with <a href="Axis.setLabels.htm">Axis.setLabels</a> or <a href="Axis.setLabels2.htm">Axis.setLabels2</a>) can be converted to a table using <a href="Axis.makeLabelTable.htm">Axis.makeLabelTable</a>.<br><br>
<div style="background-color:#cccccc;width:99%;padding:10px">
<b>Note:</b> <a href="Axis.makeLabelTable.htm">Axis.makeLabelTable</a> is only supported on a label based axis with no label stepping. You should not use this method with other axis configuration.</div><br><br>
The <a href="Axis.makeLabelTable.htm">Axis.makeLabelTable</a> returns a <a href="CDMLTable.htm">CDMLTable</a> object representing the table. It can be used to add more content to the table and to configure the appearance of the table.<br><br>
In this example, 3 rows with alternating background colors are added to the table using <a href="CDMLTable.appendRow.htm">CDMLTable.appendRow</a>. The cells in the rows are filled with data values using <a href="CDMLTable.setText.htm">CDMLTable.setText</a>. A column is added to the left of the table using <a href="CDMLTable.insertCol.htm">CDMLTable.insertCol</a>, and filled with the legend icons obtained using <a href="Layer.getLegendIcon.htm">Layer.getLegendIcon</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/datatable_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class DatatableController &lt; ApplicationController

    def index()
        @title = "Data Table (1)"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the line chart
        data0 = [42, 49, 33, 38, 64, 56, 29, 41, 44, 57, 59, 42]
        data1 = [65, 75, 47, 34, 42, 49, 73, 62, 90, 69, 66, 78]
        data2 = [36, 28, 25, 28, 38, 20, 22, 30, 25, 33, 30, 24]
        labels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct",
            "Nov", "Dec"]

        # Create a XYChart object of size 600 x 400 pixels
        c = ChartDirector::XYChart.new(600, 400)

        # Add a title to the chart using 18 pts Times Bold Italic font
        title = c.addTitle("Product Line Global Revenue", "timesbi.ttf", 18)

        # Tentatively set the plotarea at (50, 55) and of (chart_width - 100) x
        # (chart_height - 120) pixels in size. Use a vertical gradient color from sky blue
        # (aaccff) t0 light blue (f9f9ff) as background. Set both horizontal and vertical
        # grid lines to dotted semi-transprent black (aa000000).
        plotArea = c.setPlotArea(50, 55, c.getWidth() - 100, c.getHeight() - 120,
            c.linearGradientColor(0, 55, 0, 55 + c.getHeight() - 120, 0xaaccff, 0xf9fcff),
            -1, -1, c.dashLineColor(0xaa000000, ChartDirector::DotLine), -1)

        # Add a legend box and anchored the top center at the horizontal center of the
        # chart, just under the title. Use 10pts Arial Bold as font, with transparent
        # background and border.
        legendBox = c.addLegend(c.getWidth() / 2, title.getHeight(), false, "arialbd.ttf",
            10)
        legendBox.setAlignment(ChartDirector::TopCenter)
        legendBox.setBackground(ChartDirector::Transparent, ChartDirector::Transparent)

        # Set y-axis title using 10 points Arial Bold Italic font, label style to 8 points
        # Arial Bold, and axis color to transparent
        c.yAxis().setTitle("Revenue (USD millions)", "arialbi.ttf", 10)
        c.yAxis().setLabelStyle("arialbd.ttf", 8)
        c.yAxis().setColors(ChartDirector::Transparent)

        # Set y-axis tick density to 30 pixels. ChartDirector auto-scaling will use this
        # as the guideline when putting ticks on the y-axis.
        c.yAxis().setTickDensity(30)

        # Add a line layer to the chart
        layer = c.addLineLayer2()

        # Set the line width to 3 pixels
        layer.setLineWidth(3)

        # Add the three data sets to the line layer, using circles, diamands and X shapes
        # as symbols
        layer.addDataSet(data0, 0xff0000, "Quantum Computer").setDataSymbol(
            ChartDirector::CircleSymbol, 9)
        layer.addDataSet(data1, 0x00ff00, "Atom Synthesizer").setDataSymbol(
            ChartDirector::DiamondSymbol, 11)
        layer.addDataSet(data2, 0xff6600, "Proton Cannon").setDataSymbol(
            ChartDirector::Cross2Shape(), 11)

        # Set the x axis labels
        c.xAxis().setLabels(labels)

        # Convert the labels on the x-axis to a CDMLTable
        table = c.xAxis().makeLabelTable()

        # Set the default top/bottom margins of the cells to 3 pixels
        table.getStyle().setMargin2(0, 0, 3, 3)

        # Use Arial Bold as the font for the first row
        table.getRowStyle(0).setFontStyle("arialbd.ttf")

        #
        # We can add more information to the table. In this sample code, we add the data
        # series and the legend icons to the table.
        #

        # Add 3 more rows to the table. Set the background of the 1st and 3rd rows to
        # light grey (eeeeee).
        table.appendRow().setBackground(0xeeeeee, ChartDirector::LineColor)
        table.appendRow()
        table.appendRow().setBackground(0xeeeeee, ChartDirector::LineColor)

        # Put the values of the 3 data series to the cells in the 3 rows
        0.upto(data0.length - 1) do |i|
            table.setText(i, 1, (data0[i]).to_s)
            table.setText(i, 2, (data1[i]).to_s)
            table.setText(i, 3, (data2[i]).to_s)
        end

        # Insert a column on the left for the legend icons. Use 5 pixels left/right
        # margins and 3 pixels top/bottom margins for the cells in this column.
        table.insertCol(0).setMargin2(5, 5, 3, 3)

        # The top cell is set to transparent, so it is invisible
        table.getCell(0, 0).setBackground(ChartDirector::Transparent,
            ChartDirector::Transparent)

        # The other 3 cells are set to the legend icons of the 3 data series
        table.setText(0, 1, layer.getLegendIcon(0))
        table.setText(0, 2, layer.getLegendIcon(1))
        table.setText(0, 3, layer.getLegendIcon(2))

        # Layout legend box first, so we can get its size
        c.layoutLegend()

        # Adjust the plot area size, such that the bounding box (inclusive of axes) is 2
        # pixels from the left, right and bottom edge, and is just under the legend box.
        c.packPlotArea(2, legendBox.getTopY() + legendBox.getHeight(), c.getWidth() - 3,
            c.getHeight() - 3)

        # After determining the exact plot area position, we may adjust the legend box and
        # the title positions so that they are centered relative to the plot area (instead
        # of the chart)
        legendBox.setPos(plotArea.getLeftX() + (plotArea.getWidth() - legendBox.getWidth()
            ) / 2, legendBox.getTopY())
        title.setPos(plotArea.getLeftX() + (plotArea.getWidth() - title.getWidth()) / 2,
            title.getTopY())

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/datatable.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the line chart
data0 = [42, 49, 33, 38, 64, 56, 29, 41, 44, 57, 59, 42]
data1 = [65, 75, 47, 34, 42, 49, 73, 62, 90, 69, 66, 78]
data2 = [36, 28, 25, 28, 38, 20, 22, 30, 25, 33, 30, 24]
labels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct",
    "Nov", "Dec"]

# Create a XYChart object of size 600 x 400 pixels
c = ChartDirector::XYChart.new(600, 400)

# Add a title to the chart using 18 pts Times Bold Italic font
title = c.addTitle("Product Line Global Revenue", "timesbi.ttf", 18)

# Tentatively set the plotarea at (50, 55) and of (chart_width - 100) x (chart_height
# - 120) pixels in size. Use a vertical gradient color from sky blue (aaccff) t0
# light blue (f9f9ff) as background. Set both horizontal and vertical grid lines to
# dotted semi-transprent black (aa000000).
plotArea = c.setPlotArea(50, 55, c.getWidth() - 100, c.getHeight() - 120,
    c.linearGradientColor(0, 55, 0, 55 + c.getHeight() - 120, 0xaaccff, 0xf9fcff),
    -1, -1, c.dashLineColor(0xaa000000, ChartDirector::DotLine), -1)

# Add a legend box and anchored the top center at the horizontal center of the chart,
# just under the title. Use 10pts Arial Bold as font, with transparent background and
# border.
legendBox = c.addLegend(c.getWidth() / 2, title.getHeight(), false, "arialbd.ttf", 10
    )
legendBox.setAlignment(ChartDirector::TopCenter)
legendBox.setBackground(ChartDirector::Transparent, ChartDirector::Transparent)

# Set y-axis title using 10 points Arial Bold Italic font, label style to 8 points
# Arial Bold, and axis color to transparent
c.yAxis().setTitle("Revenue (USD millions)", "arialbi.ttf", 10)
c.yAxis().setLabelStyle("arialbd.ttf", 8)
c.yAxis().setColors(ChartDirector::Transparent)

# Set y-axis tick density to 30 pixels. ChartDirector auto-scaling will use this as
# the guideline when putting ticks on the y-axis.
c.yAxis().setTickDensity(30)

# Add a line layer to the chart
layer = c.addLineLayer2()

# Set the line width to 3 pixels
layer.setLineWidth(3)

# Add the three data sets to the line layer, using circles, diamands and X shapes as
# symbols
layer.addDataSet(data0, 0xff0000, "Quantum Computer").setDataSymbol(
    ChartDirector::CircleSymbol, 9)
layer.addDataSet(data1, 0x00ff00, "Atom Synthesizer").setDataSymbol(
    ChartDirector::DiamondSymbol, 11)
layer.addDataSet(data2, 0xff6600, "Proton Cannon").setDataSymbol(
    ChartDirector::Cross2Shape(), 11)

# Set the x axis labels
c.xAxis().setLabels(labels)

# Convert the labels on the x-axis to a CDMLTable
table = c.xAxis().makeLabelTable()

# Set the default top/bottom margins of the cells to 3 pixels
table.getStyle().setMargin2(0, 0, 3, 3)

# Use Arial Bold as the font for the first row
table.getRowStyle(0).setFontStyle("arialbd.ttf")

#
# We can add more information to the table. In this sample code, we add the data
# series and the legend icons to the table.
#

# Add 3 more rows to the table. Set the background of the 1st and 3rd rows to light
# grey (eeeeee).
table.appendRow().setBackground(0xeeeeee, ChartDirector::LineColor)
table.appendRow()
table.appendRow().setBackground(0xeeeeee, ChartDirector::LineColor)

# Put the values of the 3 data series to the cells in the 3 rows
0.upto(data0.length - 1) do |i|
    table.setText(i, 1, (data0[i]).to_s)
    table.setText(i, 2, (data1[i]).to_s)
    table.setText(i, 3, (data2[i]).to_s)
end

# Insert a column on the left for the legend icons. Use 5 pixels left/right margins
# and 3 pixels top/bottom margins for the cells in this column.
table.insertCol(0).setMargin2(5, 5, 3, 3)

# The top cell is set to transparent, so it is invisible
table.getCell(0, 0).setBackground(ChartDirector::Transparent,
    ChartDirector::Transparent)

# The other 3 cells are set to the legend icons of the 3 data series
table.setText(0, 1, layer.getLegendIcon(0))
table.setText(0, 2, layer.getLegendIcon(1))
table.setText(0, 3, layer.getLegendIcon(2))

# Layout legend box first, so we can get its size
c.layoutLegend()

# Adjust the plot area size, such that the bounding box (inclusive of axes) is 2
# pixels from the left, right and bottom edge, and is just under the legend box.
c.packPlotArea(2, legendBox.getTopY() + legendBox.getHeight(), c.getWidth() - 3,
    c.getHeight() - 3)

# After determining the exact plot area position, we may adjust the legend box and
# the title positions so that they are centered relative to the plot area (instead of
# the chart)
legendBox.setPos(plotArea.getLeftX() + (plotArea.getWidth() - legendBox.getWidth()
    ) / 2, legendBox.getTopY())
title.setPos(plotArea.getLeftX() + (plotArea.getWidth() - title.getWidth()) / 2,
    title.getTopY())

# Output the chart
c.makeChart("datatable.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
