<HTML>
<HEAD>
<Title>Symbol Line Chart (2)</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Symbol Line Chart (2)</p>
<hr class="separator">
<div class="content">
<img src="images/symbolline2.png">
<br><br>
This example demonstrates using symbols to represent data points and using gradient color for plot area background.<br><br>
<ul><li> The gradient plot area background is configured by using <a href="BaseChart.linearGradientColor.htm">BaseChart.linearGradientColor</a> to define the gradient color, then use <a href="XYChart.setPlotArea.htm">XYChart.setPlotArea</a> to apply it to the plot area.<br><br>
<li> The <a href="XYChart.setPlotArea.htm">XYChart.setPlotArea</a> also sets the plot area border and grid line colors to white.<br><br>
<li> Use <a href="BaseChart.addLegend.htm">BaseChart.addLegend</a> to add a legend at the top of the chart.<br><br>
<li> Use <a href="DataSet.setDataSymbol.htm">DataSet.setDataSymbol</a> to configure symbols for the data points.<br><br>
<li> Set the line width for all lines in the layer using <a href="Layer.setLineWidth.htm">Layer.setLineWidth</a>. (To set the line width for one particular line, use <a href="DataSet.setLineWidth.htm">DataSet.setLineWidth</a>.)</ul>
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/symbolline2_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class Symbolline2Controller &lt; ApplicationController

    def index()
        @title = "Symbol Line Chart (2)"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the line chart
        data0 = [42, 49, 33, 38, 64, 56, 29, 41, 44, 57, 59, 42]
        data1 = [65, 75, 47, 34, 42, 49, 73, 62, 90, 69, 66, 78]
        data2 = [36, 28, 25, 28, 38, 20, 22, 30, 25, 33, 30, 24]
        labels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct",
            "Nov", "Dec"]

        # Create a XYChart object of size 600 x 375 pixels
        c = ChartDirector::XYChart.new(600, 375)

        # Add a title to the chart using 18 pts Times Bold Italic font
        c.addTitle("Product Line Global Revenue", "timesbi.ttf", 18)

        # Set the plotarea at (50, 55) and of 500 x 280 pixels in size. Use a vertical
        # gradient color from light blue (f9f9ff) to sky blue (aaccff) as background. Set
        # border to transparent and grid lines to white (ffffff).
        c.setPlotArea(50, 55, 500, 280, c.linearGradientColor(0, 55, 0, 335, 0xf9fcff,
            0xaaccff), -1, ChartDirector::Transparent, 0xffffff)

        # Add a legend box at (50, 28) using horizontal layout. Use 10pts Arial Bold as
        # font, with transparent background.
        c.addLegend(50, 28, false, "arialbd.ttf", 10).setBackground(
            ChartDirector::Transparent)

        # Set the x axis labels
        c.xAxis().setLabels(labels)

        # Set y-axis tick density to 30 pixels. ChartDirector auto-scaling will use this
        # as the guideline when putting ticks on the y-axis.
        c.yAxis().setTickDensity(30)

        # Set axis label style to 8pts Arial Bold
        c.xAxis().setLabelStyle("arialbd.ttf", 8)
        c.yAxis().setLabelStyle("arialbd.ttf", 8)

        # Set axis line width to 2 pixels
        c.xAxis().setWidth(2)
        c.yAxis().setWidth(2)

        # Add axis title using 10pts Arial Bold Italic font
        c.yAxis().setTitle("Revenue in USD millions", "arialbi.ttf", 10)

        # Add a line layer to the chart
        layer = c.addLineLayer2()

        # Set the line width to 3 pixels
        layer.setLineWidth(3)

        # Add the three data sets to the line layer, using circles, diamands and X shapes
        # as symbols
        layer.addDataSet(data0, 0xff0000, "Quantum Computer").setDataSymbol(
            ChartDirector::CircleSymbol, 9)
        layer.addDataSet(data1, 0x00ff00, "Atom Synthesizer").setDataSymbol(
            ChartDirector::DiamondSymbol, 11)
        layer.addDataSet(data2, 0xff6600, "Proton Cannon").setDataSymbol(
            ChartDirector::Cross2Shape(), 11)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/symbolline2.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the line chart
data0 = [42, 49, 33, 38, 64, 56, 29, 41, 44, 57, 59, 42]
data1 = [65, 75, 47, 34, 42, 49, 73, 62, 90, 69, 66, 78]
data2 = [36, 28, 25, 28, 38, 20, 22, 30, 25, 33, 30, 24]
labels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct",
    "Nov", "Dec"]

# Create a XYChart object of size 600 x 375 pixels
c = ChartDirector::XYChart.new(600, 375)

# Add a title to the chart using 18 pts Times Bold Italic font
c.addTitle("Product Line Global Revenue", "timesbi.ttf", 18)

# Set the plotarea at (50, 55) and of 500 x 280 pixels in size. Use a vertical
# gradient color from light blue (f9f9ff) to sky blue (aaccff) as background. Set
# border to transparent and grid lines to white (ffffff).
c.setPlotArea(50, 55, 500, 280, c.linearGradientColor(0, 55, 0, 335, 0xf9fcff,
    0xaaccff), -1, ChartDirector::Transparent, 0xffffff)

# Add a legend box at (50, 28) using horizontal layout. Use 10pts Arial Bold as font,
# with transparent background.
c.addLegend(50, 28, false, "arialbd.ttf", 10).setBackground(
    ChartDirector::Transparent)

# Set the x axis labels
c.xAxis().setLabels(labels)

# Set y-axis tick density to 30 pixels. ChartDirector auto-scaling will use this as
# the guideline when putting ticks on the y-axis.
c.yAxis().setTickDensity(30)

# Set axis label style to 8pts Arial Bold
c.xAxis().setLabelStyle("arialbd.ttf", 8)
c.yAxis().setLabelStyle("arialbd.ttf", 8)

# Set axis line width to 2 pixels
c.xAxis().setWidth(2)
c.yAxis().setWidth(2)

# Add axis title using 10pts Arial Bold Italic font
c.yAxis().setTitle("Revenue in USD millions", "arialbi.ttf", 10)

# Add a line layer to the chart
layer = c.addLineLayer2()

# Set the line width to 3 pixels
layer.setLineWidth(3)

# Add the three data sets to the line layer, using circles, diamands and X shapes as
# symbols
layer.addDataSet(data0, 0xff0000, "Quantum Computer").setDataSymbol(
    ChartDirector::CircleSymbol, 9)
layer.addDataSet(data1, 0x00ff00, "Atom Synthesizer").setDataSymbol(
    ChartDirector::DiamondSymbol, 11)
layer.addDataSet(data2, 0xff6600, "Proton Cannon").setDataSymbol(
    ChartDirector::Cross2Shape(), 11)

# Output the chart
c.makeChart("symbolline2.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
