<HTML>
<HEAD>
<Title>Gradient Bar Shading</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Gradient Bar Shading</p>
<hr class="separator">
<div class="content">
<img src="images/gradientbar.png">
<br><br>
This example demonstrates using bar gradient shading for a horizontal bar chart. It also demonstrates using gradient color background, partially rounded frame, and automatic resizing of the plot area to fit the chart.<br><br>
<ul><li> The gradient background is achieved by using <a href="BaseChart.linearGradientColor.htm">BaseChart.linearGradientColor</a> to define the gradient color, then use <a href="BaseChart.setBackground.htm">BaseChart.setBackground</a> to set it as the chart background color.<br><br>
<li> The partially rounded frame is configured using <a href="BaseChart.setRoundedFrame.htm">BaseChart.setRoundedFrame</a>. Note that only 2 of the 4 corners are rounded.<br><br>
<li> The x-axis and y-axis are swapped using <a href="XYChart.swapXY.htm">XYChart.swapXY</a>, so the bars become horizontal.<br><br>
<li> The bar gradient effect is defined using <a href="ChartDirector.barLighting.htm">ChartDirector.barLighting</a>, then applied to the bars using <a href="Layer.setBorderColor.htm">Layer.setBorderColor</a>.<br><br>
<li> After the entire chart is configured, the <a href="XYChart.packPlotArea.htm">XYChart.packPlotArea</a> method is used  to adjust the plot area size, so as to fit the plot area and the axes in a given  bounding box.</ul>
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/gradientbar_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class GradientbarController &lt; ApplicationController

    def index()
        @title = "Gradient Bar Shading"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the bar chart
        data = [1350, 1600, 1950, 2300, 2700]

        # The labels for the bar chart
        labels = ["2001", "2002", "2003", "2004", "2005"]

        # The colors for the bars
        colors = [0xcc0000, 0x66aaee, 0xeebb22, 0xcccccc, 0xcc88ff]

        # Create a PieChart object of size 600 x 380 pixels.
        c = ChartDirector::XYChart.new(600, 380)

        # Use the white on black palette, which means the default text and line colors are
        # white
        c.setColors(ChartDirector::whiteOnBlackPalette)

        # Use a vertical gradient color from blue (0000cc) to deep blue (000044) as
        # background. Use rounded corners of 30 pixels radius for the top-left and
        # bottom-right corners.
        c.setBackground(c.linearGradientColor(0, 0, 0, c.getHeight(), 0x0000cc, 0x000044))
        c.setRoundedFrame(0xffffff, 30, 0, 30, 0)

        # Add a title using 18 pts Times New Roman Bold Italic font. Add 6 pixels top and
        # bottom margins to the title.
        title = c.addTitle("Annual Revenue for Star Tech", "timesbi.ttf", 18)
        title.setMargin2(0, 0, 6, 6)

        # Add a separator line in white color just under the title
        c.addLine(20, title.getHeight(), c.getWidth() - 21, title.getHeight(), 0xffffff)

        # Tentatively set the plotarea at (70, 80) and of 480 x 240 pixels in size. Use
        # transparent border and white grid lines
        c.setPlotArea(70, 80, 480, 240, -1, -1, ChartDirector::Transparent, 0xffffff)

        # Swap the axis so that the bars are drawn horizontally
        c.swapXY()

        # Add a multi-color bar chart layer using the supplied data. Use bar gradient
        # lighting with the light intensity from 0.75 to 2.0
        c.addBarLayer3(data, colors).setBorderColor(ChartDirector::Transparent,
            ChartDirector::barLighting(0.75, 2.0))

        # Set the labels on the x axis.
        c.xAxis().setLabels(labels)

        # Show the same scale on the left and right y-axes
        c.syncYAxis()

        # Set the bottom y-axis title using 10pt Arial Bold font
        c.yAxis().setTitle("USD (millions)", "arialbd.ttf", 10)

        # Set y-axes to transparent
        c.yAxis().setColors(ChartDirector::Transparent)
        c.yAxis2().setColors(ChartDirector::Transparent)

        # Disable ticks on the x-axis by setting the tick color to transparent
        c.xAxis().setTickColor(ChartDirector::Transparent)

        # Set the label styles of all axes to 8pt Arial Bold font
        c.xAxis().setLabelStyle("arialbd.ttf", 8)
        c.yAxis().setLabelStyle("arialbd.ttf", 8)
        c.yAxis2().setLabelStyle("arialbd.ttf", 8)

        # Adjust the plot area size, such that the bounding box (inclusive of axes) is 30
        # pixels from the left edge, 25 pixels below the title, 50 pixels from the right
        # edge, and 25 pixels from the bottom edge.
        c.packPlotArea(30, title.getHeight() + 25, c.getWidth() - 50, c.getHeight() - 25)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/gradientbar.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the bar chart
data = [1350, 1600, 1950, 2300, 2700]

# The labels for the bar chart
labels = ["2001", "2002", "2003", "2004", "2005"]

# The colors for the bars
colors = [0xcc0000, 0x66aaee, 0xeebb22, 0xcccccc, 0xcc88ff]

# Create a PieChart object of size 600 x 380 pixels.
c = ChartDirector::XYChart.new(600, 380)

# Use the white on black palette, which means the default text and line colors are
# white
c.setColors(ChartDirector::whiteOnBlackPalette)

# Use a vertical gradient color from blue (0000cc) to deep blue (000044) as
# background. Use rounded corners of 30 pixels radius for the top-left and
# bottom-right corners.
c.setBackground(c.linearGradientColor(0, 0, 0, c.getHeight(), 0x0000cc, 0x000044))
c.setRoundedFrame(0xffffff, 30, 0, 30, 0)

# Add a title using 18 pts Times New Roman Bold Italic font. Add 6 pixels top and
# bottom margins to the title.
title = c.addTitle("Annual Revenue for Star Tech", "timesbi.ttf", 18)
title.setMargin2(0, 0, 6, 6)

# Add a separator line in white color just under the title
c.addLine(20, title.getHeight(), c.getWidth() - 21, title.getHeight(), 0xffffff)

# Tentatively set the plotarea at (70, 80) and of 480 x 240 pixels in size. Use
# transparent border and white grid lines
c.setPlotArea(70, 80, 480, 240, -1, -1, ChartDirector::Transparent, 0xffffff)

# Swap the axis so that the bars are drawn horizontally
c.swapXY()

# Add a multi-color bar chart layer using the supplied data. Use bar gradient
# lighting with the light intensity from 0.75 to 2.0
c.addBarLayer3(data, colors).setBorderColor(ChartDirector::Transparent,
    ChartDirector::barLighting(0.75, 2.0))

# Set the labels on the x axis.
c.xAxis().setLabels(labels)

# Show the same scale on the left and right y-axes
c.syncYAxis()

# Set the bottom y-axis title using 10pt Arial Bold font
c.yAxis().setTitle("USD (millions)", "arialbd.ttf", 10)

# Set y-axes to transparent
c.yAxis().setColors(ChartDirector::Transparent)
c.yAxis2().setColors(ChartDirector::Transparent)

# Disable ticks on the x-axis by setting the tick color to transparent
c.xAxis().setTickColor(ChartDirector::Transparent)

# Set the label styles of all axes to 8pt Arial Bold font
c.xAxis().setLabelStyle("arialbd.ttf", 8)
c.yAxis().setLabelStyle("arialbd.ttf", 8)
c.yAxis2().setLabelStyle("arialbd.ttf", 8)

# Adjust the plot area size, such that the bounding box (inclusive of axes) is 30
# pixels from the left edge, 25 pixels below the title, 50 pixels from the right
# edge, and 25 pixels from the bottom edge.
c.packPlotArea(30, title.getHeight() + 25, c.getWidth() - 50, c.getHeight() - 25)

# Output the chart
c.makeChart("gradientbar.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
