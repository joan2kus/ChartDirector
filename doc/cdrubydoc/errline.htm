<HTML>
<HEAD>
<Title>Line with Error Symbols</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Line with Error Symbols</p>
<hr class="separator">
<div class="content">
<img src="images/errline.png">
<br><br>
This example demonstrates combining a line layer with a box-whisker layer to draw a line with error symbols.<br><br>
The blue line and the yellow diamond symbols are from the line layer, created using <a href="XYChart.addLineLayer2.htm">XYChart.addLineLayer2</a>, <a href="Layer.addDataSet.htm">Layer.addDataSet</a>, and <a href="DataSet.setDataSymbol.htm">DataSet.setDataSymbol</a>.<br><br>
The error symbols come from the box-whisker layer, created using <a href="XYChart.addBoxWhiskerLayer.htm">XYChart.addBoxWhiskerLayer</a>. In this example, the "box" parts of the box- whisker symbols are disabled by setting the data for the box and median to empty arrays. As a result, only the "whisker" parts of the box-whisker symbols are visible and they become the error symbols.<br><br>
The maximum and minimum marks in this example is computed by adding/subtracting the error value to/from the data value using a ChartDirector utility class <a href="ArrayMath.htm">ArrayMath</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/errline_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class ErrlineController &lt; ApplicationController

    def index()
        @title = "Line with Error Symbols"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data with error information
        data = [42, 49, 33, 38, 51, 46, 29, 41, 44, 57, 59, 52, 37, 34, 51, 56, 56, 60,
            70, 76, 63, 67, 75, 64, 51]
        errData = [5, 6, 5.1, 6.5, 6.6, 8, 5.4, 5.1, 4.6, 5.0, 5.2, 6.0, 4.9, 5.6, 4.8,
            6.2, 7.4, 7.1, 6.0, 6.6, 7.1, 5.3, 5.5, 7.9, 6.1]

        # The labels for the chart
        labels = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12",
            "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"]

        # Create a XYChart object of size 600 x 300 pixels, with a light grey (eeeeee)
        # background, black border, 1 pixel 3D border effect and rounded corners.
        c = ChartDirector::XYChart.new(600, 300, 0xeeeeee, 0x000000, 1)
        c.setRoundedFrame()

        # Set directory for loading images to current script directory
        c.setSearchPath(File.dirname(__FILE__))

        # Set the plotarea at (55, 55) and of size 520 x 195 pixels, with white (ffffff)
        # background. Set horizontal and vertical grid lines to grey (cccccc).
        c.setPlotArea(55, 55, 520, 195, 0xffffff, -1, -1, 0xcccccc, 0xcccccc)

        # Add a title box to the chart using 15 pts Times Bold Italic font. The title is
        # in CDML and includes embedded images for highlight. The text is on a light grey
        # (dddddd) background, with glass lighting effect.
        c.addTitle(
            "&lt;*block,valign=absmiddle*&gt;&lt;*img=star.png*&gt;&lt;*img=star.png*&gt; Molecular " \
            "Temperature Control &lt;*img=star.png*&gt;&lt;*img=star.png*&gt;&lt;*/*&gt;", "timesbi.ttf", 15
            ).setBackground(0xdddddd, 0, ChartDirector::glassEffect())

        # Add a title to the y axis
        c.yAxis().setTitle("Temperature")

        # Add a title to the x axis using CMDL
        c.xAxis().setTitle(
            "&lt;*block,valign=absmiddle*&gt;&lt;*img=clock.png*&gt;  Elapsed Time (hour)&lt;*/*&gt;")

        # Set the labels on the x axis.
        c.xAxis().setLabels(labels)

        # Display 1 out of 3 labels on the x-axis. Show minor ticks for remaining labels.
        c.xAxis().setLabelStep(3, 1)

        # Set the axes width to 2 pixels
        c.xAxis().setWidth(2)
        c.yAxis().setWidth(2)

        # Add a line layer to the chart
        lineLayer = c.addLineLayer2()

        # Add a blue (0xff) data set to the line layer, with yellow (0xffff80) diamond
        # symbols
        lineLayer.addDataSet(data, 0x0000ff).setDataSymbol(ChartDirector::DiamondSymbol,
            12, 0xffff80)

        # Set the line width to 2 pixels
        lineLayer.setLineWidth(2)

        # Add a box whisker layer to the chart. Use the upper and lower mark of the box
        # whisker layer to act as error zones. The upper and lower marks are computed
        # using the ArrayMath object.
        errLayer = c.addBoxWhiskerLayer(nil, nil, ChartDirector::ArrayMath.new(data).add(
            errData).result(), ChartDirector::ArrayMath.new(data).sub(errData).result(),
            data, ChartDirector::Transparent, 0xbb6633)

        # Set the line width to 2 pixels
        errLayer.setLineWidth(2)

        # Set the error zone to occupy half the space between the symbols
        errLayer.setDataGap(0.5)

        # Add a custom CDML text at the bottom right of the plot area as the logo
        c.addText(575, 247,
            "&lt;*block,valign=absmiddle*&gt;&lt;*img=small_molecule.png*&gt; &lt;*block*&gt;" \
            "&lt;*font=timesbi.ttf,size=10,color=804040*&gt;Molecular\nEngineering&lt;*/*&gt;"
            ).setAlignment(ChartDirector::BottomRight)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/errline.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data with error information
data = [42, 49, 33, 38, 51, 46, 29, 41, 44, 57, 59, 52, 37, 34, 51, 56, 56, 60, 70,
    76, 63, 67, 75, 64, 51]
errData = [5, 6, 5.1, 6.5, 6.6, 8, 5.4, 5.1, 4.6, 5.0, 5.2, 6.0, 4.9, 5.6, 4.8, 6.2,
    7.4, 7.1, 6.0, 6.6, 7.1, 5.3, 5.5, 7.9, 6.1]

# The labels for the chart
labels = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13",
    "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"]

# Create a XYChart object of size 600 x 300 pixels, with a light grey (eeeeee)
# background, black border, 1 pixel 3D border effect and rounded corners.
c = ChartDirector::XYChart.new(600, 300, 0xeeeeee, 0x000000, 1)
c.setRoundedFrame()

# Set the plotarea at (55, 55) and of size 520 x 195 pixels, with white (ffffff)
# background. Set horizontal and vertical grid lines to grey (cccccc).
c.setPlotArea(55, 55, 520, 195, 0xffffff, -1, -1, 0xcccccc, 0xcccccc)

# Add a title box to the chart using 15 pts Times Bold Italic font. The title is in
# CDML and includes embedded images for highlight. The text is on a light grey
# (dddddd) background, with glass lighting effect.
c.addTitle(
    "&lt;*block,valign=absmiddle*&gt;&lt;*img=star.png*&gt;&lt;*img=star.png*&gt; Molecular " \
    "Temperature Control &lt;*img=star.png*&gt;&lt;*img=star.png*&gt;&lt;*/*&gt;", "timesbi.ttf", 15
    ).setBackground(0xdddddd, 0, ChartDirector::glassEffect())

# Add a title to the y axis
c.yAxis().setTitle("Temperature")

# Add a title to the x axis using CMDL
c.xAxis().setTitle(
    "&lt;*block,valign=absmiddle*&gt;&lt;*img=clock.png*&gt;  Elapsed Time (hour)&lt;*/*&gt;")

# Set the labels on the x axis.
c.xAxis().setLabels(labels)

# Display 1 out of 3 labels on the x-axis. Show minor ticks for remaining labels.
c.xAxis().setLabelStep(3, 1)

# Set the axes width to 2 pixels
c.xAxis().setWidth(2)
c.yAxis().setWidth(2)

# Add a line layer to the chart
lineLayer = c.addLineLayer2()

# Add a blue (0xff) data set to the line layer, with yellow (0xffff80) diamond
# symbols
lineLayer.addDataSet(data, 0x0000ff).setDataSymbol(ChartDirector::DiamondSymbol, 12,
    0xffff80)

# Set the line width to 2 pixels
lineLayer.setLineWidth(2)

# Add a box whisker layer to the chart. Use the upper and lower mark of the box
# whisker layer to act as error zones. The upper and lower marks are computed using
# the ArrayMath object.
errLayer = c.addBoxWhiskerLayer(nil, nil, ChartDirector::ArrayMath.new(data).add(
    errData).result(), ChartDirector::ArrayMath.new(data).sub(errData).result(),
    data, ChartDirector::Transparent, 0xbb6633)

# Set the line width to 2 pixels
errLayer.setLineWidth(2)

# Set the error zone to occupy half the space between the symbols
errLayer.setDataGap(0.5)

# Add a custom CDML text at the bottom right of the plot area as the logo
c.addText(575, 247,
    "&lt;*block,valign=absmiddle*&gt;&lt;*img=small_molecule.png*&gt; &lt;*block*&gt;" \
    "&lt;*font=timesbi.ttf,size=10,color=804040*&gt;Molecular\nEngineering&lt;*/*&gt;"
    ).setAlignment(ChartDirector::BottomRight)

# Output the chart
c.makeChart("errline.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
