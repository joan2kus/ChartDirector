<HTML>
<HEAD>
<Title>Y Zone Coloring</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Y Zone Coloring</p>
<hr class="separator">
<div class="content">
<img src="images/yzonecolor.png">
<br><br>
This example demonstrates using y zone colors - colors that change at certain y value thresholds.<br><br>
In this example, a y zone color is used as the fill color of an area layer, so that the area fill color changes above a certain threshold.<br><br>
Y zone colors are created using <a href="Layer.yZoneColor.htm">Layer.yZoneColor</a>. You can use a y zone color in any ChartDirector API that expects a color. For instance, you can use a y zone color as background color, fill color of data sets, line color, etc.<br><br>
A single y zone color can support one threshold value and change between two colors. The two colors can be any colors, including another y zone color. You may create y zone colors with multiple thresholds by cascading multiple y zone colors this way.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/yzonecolor_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class YzonecolorController &lt; ApplicationController

    def index()
        @title = "Y Zone Coloring"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the chart
        data = [30, 28, 40, 55, 75, 68, 54, 60, 50, 62, 75, 65, 75, 89, 60, 55, 53, 35,
            50, 66, 56, 48, 52, 65, 62]

        # The labels for the chart
        labels = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12",
            "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"]

        # Create a XYChart object of size 500 x 300 pixels, with a pale yellow (0xffffc0)
        # background, a black border, and 1 pixel 3D border effect
        c = ChartDirector::XYChart.new(500, 300, 0xffffc0, 0x000000, 1)

        # Set directory for loading images to current script directory
        c.setSearchPath(File.dirname(__FILE__))

        # Set the plotarea at (55, 50) and of size 420 x 205 pixels, with white
        # background. Turn on both horizontal and vertical grid lines with light grey
        # color (0xc0c0c0)
        c.setPlotArea(55, 50, 420, 205, 0xffffff).setGridColor(0xc0c0c0, 0xc0c0c0)

        # Add a legend box at (55, 25) (top of the chart) with horizontal layout. Use 8
        # pts Arial font. Set the background and border color to Transparent.
        legendBox = c.addLegend(55, 25, false, "", 8)
        legendBox.setBackground(ChartDirector::Transparent)

        # Add keys to the legend box to explain the color zones
        legendBox.addKey("Normal Zone", 0x8033ff33)
        legendBox.addKey("Alert Zone", 0x80ff3333)

        # Add a title box to the chart using 13 pts Arial Bold Italic font. The title is
        # in CDML and includes embedded images for highlight. The text is white (0xffffff)
        # on a black background, with a 1 pixel 3D border.
        c.addTitle(
            "&lt;*block,valign=absmiddle*&gt;&lt;*img=star.png*&gt;&lt;*img=star.png*&gt; Y Zone Color " \
            "Demo &lt;*img=star.png*&gt;&lt;*img=star.png*&gt;&lt;*/*&gt;", "arialbi.ttf", 13, 0xffffff
            ).setBackground(0x000000, -1, 1)

        # Add a title to the y axis
        c.yAxis().setTitle("Energy Concentration (KJ per liter)")

        # Set the labels on the x axis.
        c.xAxis().setLabels(labels)

        # Display 1 out of 3 labels on the x-axis.
        c.xAxis().setLabelStep(3)

        # Add a title to the x axis using CDML
        c.xAxis().setTitle(
            "&lt;*block,valign=absmiddle*&gt;&lt;*img=clock.png*&gt;  Elapsed Time (hour)&lt;*/*&gt;")

        # Set the axes width to 2 pixels
        c.xAxis().setWidth(2)
        c.yAxis().setWidth(2)

        # Add an area layer to the chart. The area is using a y zone color, where the
        # color is semi-transparent green below 60, and semi-transparent red above 60.
        c.addAreaLayer(data, c.yZoneColor(60, 0x8033ff33, 0x80ff3333))

        # Add a custom CDML text at the bottom right of the plot area as the logo
        c.addText(475, 255,
            "&lt;*block,valign=absmiddle*&gt;&lt;*img=small_molecule.png*&gt; &lt;*block*&gt;" \
            "&lt;*font=timesbi.ttf,size=10,color=804040*&gt;Molecular\nEngineering&lt;*/*&gt;"
            ).setAlignment(ChartDirector::BottomRight)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/yzonecolor.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the chart
data = [30, 28, 40, 55, 75, 68, 54, 60, 50, 62, 75, 65, 75, 89, 60, 55, 53, 35, 50,
    66, 56, 48, 52, 65, 62]

# The labels for the chart
labels = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13",
    "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"]

# Create a XYChart object of size 500 x 300 pixels, with a pale yellow (0xffffc0)
# background, a black border, and 1 pixel 3D border effect
c = ChartDirector::XYChart.new(500, 300, 0xffffc0, 0x000000, 1)

# Set the plotarea at (55, 50) and of size 420 x 205 pixels, with white background.
# Turn on both horizontal and vertical grid lines with light grey color (0xc0c0c0)
c.setPlotArea(55, 50, 420, 205, 0xffffff).setGridColor(0xc0c0c0, 0xc0c0c0)

# Add a legend box at (55, 25) (top of the chart) with horizontal layout. Use 8 pts
# Arial font. Set the background and border color to Transparent.
legendBox = c.addLegend(55, 25, false, "", 8)
legendBox.setBackground(ChartDirector::Transparent)

# Add keys to the legend box to explain the color zones
legendBox.addKey("Normal Zone", 0x8033ff33)
legendBox.addKey("Alert Zone", 0x80ff3333)

# Add a title box to the chart using 13 pts Arial Bold Italic font. The title is in
# CDML and includes embedded images for highlight. The text is white (0xffffff) on a
# black background, with a 1 pixel 3D border.
c.addTitle(
    "&lt;*block,valign=absmiddle*&gt;&lt;*img=star.png*&gt;&lt;*img=star.png*&gt; Y Zone Color Demo " \
    "&lt;*img=star.png*&gt;&lt;*img=star.png*&gt;&lt;*/*&gt;", "arialbi.ttf", 13, 0xffffff
    ).setBackground(0x000000, -1, 1)

# Add a title to the y axis
c.yAxis().setTitle("Energy Concentration (KJ per liter)")

# Set the labels on the x axis.
c.xAxis().setLabels(labels)

# Display 1 out of 3 labels on the x-axis.
c.xAxis().setLabelStep(3)

# Add a title to the x axis using CDML
c.xAxis().setTitle(
    "&lt;*block,valign=absmiddle*&gt;&lt;*img=clock.png*&gt;  Elapsed Time (hour)&lt;*/*&gt;")

# Set the axes width to 2 pixels
c.xAxis().setWidth(2)
c.yAxis().setWidth(2)

# Add an area layer to the chart. The area is using a y zone color, where the color
# is semi-transparent green below 60, and semi-transparent red above 60.
c.addAreaLayer(data, c.yZoneColor(60, 0x8033ff33, 0x80ff3333))

# Add a custom CDML text at the bottom right of the plot area as the logo
c.addText(475, 255,
    "&lt;*block,valign=absmiddle*&gt;&lt;*img=small_molecule.png*&gt; &lt;*block*&gt;" \
    "&lt;*font=timesbi.ttf,size=10,color=804040*&gt;Molecular\nEngineering&lt;*/*&gt;"
    ).setAlignment(ChartDirector::BottomRight)

# Output the chart
c.makeChart("yzonecolor.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
