<HTML>
<HEAD>
<Title>Pattern Area Chart</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Pattern Area Chart</p>
<hr class="separator">
<div class="content">
<img src="images/patternarea.png">
<br><br>
This example demonstrates using a pattern for filling the area in an area chart, together with a number of chart formatting features.<br><br>
<ul><li> Create an XYChart object with background color and border using <a href="XYChart.XYChart.htm">XYChart.XYChart</a>.<br><br>
<li> Set the background color of the title box using <a href="Box.setBackground.htm">Box.setBackground</a>. The background color is a pattern color created using <a href="BaseChart.patternColor.htm">BaseChart.patternColor</a>.<br><br>
<li> Enable both vertical and horizontal grid lines using <a href="XYChart.setPlotArea.htm">XYChart.setPlotArea</a>. The grid colors are dash line colors created using <a href="BaseChart.dashLineColor.htm">BaseChart.dashLineColor</a>.<br><br>
<li> Create a pattern color with a "snow pattern" loaded from an image file using <a href="BaseChart.patternColor2.htm">BaseChart.patternColor2</a>.<br><br>
<li> Use <a href="DataSet.setDataColor.htm">DataSet.setDataColor</a> to specify the area fill and border colors. Use the "snow pattern" as the area fill color.<br><br>
<li> Use <a href="Layer.setLineWidth.htm">Layer.setLineWidth</a> to increase the border width of the area to highlight it.</ul>
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/patternarea_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class PatternareaController &lt; ApplicationController

    def index()
        @title = "Pattern Area Chart"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the area chart
        data = [3.0, 2.8, 4.0, 5.5, 7.5, 6.8, 5.4, 6.0, 5.0, 6.2, 7.5, 6.5, 7.5, 8.1, 6.0,
            5.5, 5.3, 3.5, 5.0, 6.6, 5.6, 4.8, 5.2, 6.5, 6.2]

        # The labels for the area chart
        labels = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12",
            "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"]

        # Create a XYChart object of size 300 x 180 pixels. Set the background to pale
        # yellow (0xffffa0) with a black border (0x0)
        c = ChartDirector::XYChart.new(300, 180, 0xffffa0, 0x000000)

        # Set the plotarea at (45, 35) and of size 240 x 120 pixels. Set the background to
        # white (0xffffff). Set both horizontal and vertical grid lines to black (&H0&)
        # dotted lines (pattern code 0x0103)
        c.setPlotArea(45, 35, 240, 120, 0xffffff, -1, -1, c.dashLineColor(0x000000,
            0x000103), c.dashLineColor(0x000000, 0x000103))

        # Add a title to the chart using 10 pts Arial Bold font. Use a 1 x 2 bitmap
        # pattern as the background. Set the border to black (0x0).
        c.addTitle("Snow Percipitation (Dec 12)", "arialbd.ttf", 10).setBackground(
            c.patternColor([0xb0b0f0, 0xe0e0ff], 2), 0x000000)

        # Add a title to the y axis
        c.yAxis().setTitle("mm per hour")

        # Set the labels on the x axis.
        c.xAxis().setLabels(labels)

        # Display 1 out of 3 labels on the x-axis.
        c.xAxis().setLabelStep(3)

        # Add an area layer to the chart
        layer = c.addAreaLayer()

        # Load a snow pattern from an external file "snow.png".
        snowPattern = c.patternColor2(File.dirname(__FILE__) + "/snow.png")

        # Add a data set to the area layer using the snow pattern as the fill color. Use
        # deep blue (0x0000ff) as the area border line color (&H0000ff&)
        layer.addDataSet(data).setDataColor(snowPattern, 0x0000ff)

        # Set the line width to 2 pixels to highlight the line
        layer.setLineWidth(2)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/patternarea.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the area chart
data = [3.0, 2.8, 4.0, 5.5, 7.5, 6.8, 5.4, 6.0, 5.0, 6.2, 7.5, 6.5, 7.5, 8.1, 6.0,
    5.5, 5.3, 3.5, 5.0, 6.6, 5.6, 4.8, 5.2, 6.5, 6.2]

# The labels for the area chart
labels = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13",
    "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"]

# Create a XYChart object of size 300 x 180 pixels. Set the background to pale yellow
# (0xffffa0) with a black border (0x0)
c = ChartDirector::XYChart.new(300, 180, 0xffffa0, 0x000000)

# Set the plotarea at (45, 35) and of size 240 x 120 pixels. Set the background to
# white (0xffffff). Set both horizontal and vertical grid lines to black (&H0&)
# dotted lines (pattern code 0x0103)
c.setPlotArea(45, 35, 240, 120, 0xffffff, -1, -1, c.dashLineColor(0x000000, 0x000103
    ), c.dashLineColor(0x000000, 0x000103))

# Add a title to the chart using 10 pts Arial Bold font. Use a 1 x 2 bitmap pattern
# as the background. Set the border to black (0x0).
c.addTitle("Snow Percipitation (Dec 12)", "arialbd.ttf", 10).setBackground(
    c.patternColor([0xb0b0f0, 0xe0e0ff], 2), 0x000000)

# Add a title to the y axis
c.yAxis().setTitle("mm per hour")

# Set the labels on the x axis.
c.xAxis().setLabels(labels)

# Display 1 out of 3 labels on the x-axis.
c.xAxis().setLabelStep(3)

# Add an area layer to the chart
layer = c.addAreaLayer()

# Load a snow pattern from an external file "snow.png".
snowPattern = c.patternColor2("snow.png")

# Add a data set to the area layer using the snow pattern as the fill color. Use deep
# blue (0x0000ff) as the area border line color (&H0000ff&)
layer.addDataSet(data).setDataColor(snowPattern, 0x0000ff)

# Set the line width to 2 pixels to highlight the line
layer.setLineWidth(2)

# Output the chart
c.makeChart("patternarea.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
