<HTML>
<HEAD>
<Title>Percentage Area Chart</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Percentage Area Chart</p>
<hr class="separator">
<div class="content">
<img src="images/percentarea.png">
<br><br>
This example demonstrates creating a percentage area chart. It also demonstrates how to include icons in the legend box using <a href="cdml.htm">CDML</a>.<br><br>
A percentage area chart is like a stacked area chart, except the areas are individually scaled so that they stacked up to 100.<br><br>
Note that in this example, the legend box contains icons. This is achieved by including the icons in the data set name using <a href="cdml.htm">CDML</a>.<br><br>
The key features demonstrated in this example are:<br><br>
<ul><li> Add a legend to the chart using <a href="BaseChart.addLegend.htm">BaseChart.addLegend</a>, and set the key size (the color box to the right of each legend entry) to 16 x 32 pixels using <a href="LegendBox.setKeySize.htm">LegendBox.setKeySize</a>. This is to better match the size of the icons.<br><br>
<li> Reverse the legend box entries using <a href="Layer.setLegend.htm">Layer.setLegend</a>, so that the last data set name is on top in the legend box. This is useful for a vertical legend box in a vertical stacked chart with purely positive data. In such case, the last data set will be stacked to the top. Reversing the legend box will make the legend keys visually consistent with the stacking order of the chart.<br><br>
<li> Add a percentage area layer using <a href="XYChart.addAreaLayer2.htm">XYChart.addAreaLayer2</a> with the <a href="ChartDirector.Percentage.htm">Percentage</a> predefined constant.<br><br>
<li> Add multiple data sets to the area layer using <a href="Layer.addDataSet.htm">Layer.addDataSet</a>, with data set names expressed using <a href="cdml.htm">CDML</a> to include icons.</ul>
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/percentarea_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class PercentareaController &lt; ApplicationController

    def index()
        @title = "Percentage Area Chart"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the area chart
        data0 = [42, 49, 33, 38, 51, 46, 29, 41, 44, 57, 59, 52, 37, 34, 51, 56, 56, 60,
            70, 76, 63, 67, 75, 64, 51]
        data1 = [50, 55, 47, 34, 42, 49, 63, 62, 73, 59, 56, 50, 64, 60, 67, 67, 58, 59,
            73, 77, 84, 82, 80, 84, 98]
        data2 = [87, 89, 85, 66, 53, 39, 24, 21, 37, 56, 37, 23, 21, 33, 13, 17, 14, 23,
            16, 25, 29, 30, 45, 47, 46]

        # The timestamps on the x-axis
        labels = [Time.mktime(1996, 1, 1), Time.mktime(1996, 4, 1), Time.mktime(1996, 7, 1
            ), Time.mktime(1996, 10, 1), Time.mktime(1997, 1, 1), Time.mktime(1997, 4, 1),
            Time.mktime(1997, 7, 1), Time.mktime(1997, 10, 1), Time.mktime(1998, 1, 1),
            Time.mktime(1998, 4, 1), Time.mktime(1998, 7, 1), Time.mktime(1998, 10, 1),
            Time.mktime(1999, 1, 1), Time.mktime(1999, 4, 1), Time.mktime(1999, 7, 1),
            Time.mktime(1999, 10, 1), Time.mktime(2000, 1, 1), Time.mktime(2000, 4, 1),
            Time.mktime(2000, 7, 1), Time.mktime(2000, 10, 1), Time.mktime(2001, 1, 1),
            Time.mktime(2001, 4, 1), Time.mktime(2001, 7, 1), Time.mktime(2001, 10, 1),
            Time.mktime(2002, 1, 1)]

        # Create a XYChart object of size 500 x 280 pixels, using 0xffffcc as background
        # color, with a black border, and 1 pixel 3D border effect
        c = ChartDirector::XYChart.new(500, 280, 0xffffcc, 0, 1)

        # Set directory for loading images to current script directory
        c.setSearchPath(File.dirname(__FILE__))

        # Set the plotarea at (50, 45) and of size 320 x 200 pixels with white background.
        # Enable horizontal and vertical grid lines using the grey (0xc0c0c0) color.
        c.setPlotArea(50, 45, 320, 200, 0xffffff).setGridColor(0xc0c0c0, 0xc0c0c0)

        # Add a legend box at (370, 45) using vertical layout and 8 points Arial Bold
        # font.
        legendBox = c.addLegend(370, 45, true, "arialbd.ttf", 8)

        # Set the legend box background and border to transparent
        legendBox.setBackground(ChartDirector::Transparent, ChartDirector::Transparent)

        # Set the legend box icon size to 16 x 32 pixels to match with custom icon size
        legendBox.setKeySize(16, 32)

        # Add a title to the chart using 14 points Times Bold Itatic font and white font
        # color, and 0x804020 as the background color
        c.addTitle("Quarterly Product Sales", "timesbi.ttf", 14, 0xffffff).setBackground(
            0x804020)

        # Set the labels on the x axis.
        c.xAxis().setLabels2(labels)

        # Set multi-style axis label formatting. Start of year labels are displayed as
        # yyyy. For other labels, just show minor tick.
        c.xAxis().setMultiFormat(ChartDirector::StartOfYearFilter(), "{value|yyyy}",
            ChartDirector::AllPassFilter(), "-")

        # Add a percentage area layer to the chart
        layer = c.addAreaLayer2(ChartDirector::Percentage)

        # Add the three data sets to the area layer, using icons images with labels as
        # data set names
        layer.addDataSet(data0, 0x40ddaa77,
            "&lt;*block,valign=absmiddle*&gt;&lt;*img=service.png*&gt; Service&lt;*/*&gt;")
        layer.addDataSet(data1, 0x40aadd77,
            "&lt;*block,valign=absmiddle*&gt;&lt;*img=software.png*&gt; Software&lt;*/*&gt;")
        layer.addDataSet(data2, 0x40aa77dd,
            "&lt;*block,valign=absmiddle*&gt;&lt;*img=computer.png*&gt; Hardware&lt;*/*&gt;")

        # For a vertical stacked chart with positive data only, the last data set is
        # always on top. However, in a vertical legend box, the last data set is at the
        # bottom. This can be reversed by using the setLegend method.
        layer.setLegend(ChartDirector::ReverseLegend)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/percentarea.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the area chart
data0 = [42, 49, 33, 38, 51, 46, 29, 41, 44, 57, 59, 52, 37, 34, 51, 56, 56, 60, 70,
    76, 63, 67, 75, 64, 51]
data1 = [50, 55, 47, 34, 42, 49, 63, 62, 73, 59, 56, 50, 64, 60, 67, 67, 58, 59, 73,
    77, 84, 82, 80, 84, 98]
data2 = [87, 89, 85, 66, 53, 39, 24, 21, 37, 56, 37, 23, 21, 33, 13, 17, 14, 23, 16,
    25, 29, 30, 45, 47, 46]

# The timestamps on the x-axis
labels = [Time.mktime(1996, 1, 1), Time.mktime(1996, 4, 1), Time.mktime(1996, 7, 1),
    Time.mktime(1996, 10, 1), Time.mktime(1997, 1, 1), Time.mktime(1997, 4, 1),
    Time.mktime(1997, 7, 1), Time.mktime(1997, 10, 1), Time.mktime(1998, 1, 1),
    Time.mktime(1998, 4, 1), Time.mktime(1998, 7, 1), Time.mktime(1998, 10, 1),
    Time.mktime(1999, 1, 1), Time.mktime(1999, 4, 1), Time.mktime(1999, 7, 1),
    Time.mktime(1999, 10, 1), Time.mktime(2000, 1, 1), Time.mktime(2000, 4, 1),
    Time.mktime(2000, 7, 1), Time.mktime(2000, 10, 1), Time.mktime(2001, 1, 1),
    Time.mktime(2001, 4, 1), Time.mktime(2001, 7, 1), Time.mktime(2001, 10, 1),
    Time.mktime(2002, 1, 1)]

# Create a XYChart object of size 500 x 280 pixels, using 0xffffcc as background
# color, with a black border, and 1 pixel 3D border effect
c = ChartDirector::XYChart.new(500, 280, 0xffffcc, 0, 1)

# Set the plotarea at (50, 45) and of size 320 x 200 pixels with white background.
# Enable horizontal and vertical grid lines using the grey (0xc0c0c0) color.
c.setPlotArea(50, 45, 320, 200, 0xffffff).setGridColor(0xc0c0c0, 0xc0c0c0)

# Add a legend box at (370, 45) using vertical layout and 8 points Arial Bold font.
legendBox = c.addLegend(370, 45, true, "arialbd.ttf", 8)

# Set the legend box background and border to transparent
legendBox.setBackground(ChartDirector::Transparent, ChartDirector::Transparent)

# Set the legend box icon size to 16 x 32 pixels to match with custom icon size
legendBox.setKeySize(16, 32)

# Add a title to the chart using 14 points Times Bold Itatic font and white font
# color, and 0x804020 as the background color
c.addTitle("Quarterly Product Sales", "timesbi.ttf", 14, 0xffffff).setBackground(
    0x804020)

# Set the labels on the x axis.
c.xAxis().setLabels2(labels)

# Set multi-style axis label formatting. Start of year labels are displayed as yyyy.
# For other labels, just show minor tick.
c.xAxis().setMultiFormat(ChartDirector::StartOfYearFilter(), "{value|yyyy}",
    ChartDirector::AllPassFilter(), "-")

# Add a percentage area layer to the chart
layer = c.addAreaLayer2(ChartDirector::Percentage)

# Add the three data sets to the area layer, using icons images with labels as data
# set names
layer.addDataSet(data0, 0x40ddaa77,
    "&lt;*block,valign=absmiddle*&gt;&lt;*img=service.png*&gt; Service&lt;*/*&gt;")
layer.addDataSet(data1, 0x40aadd77,
    "&lt;*block,valign=absmiddle*&gt;&lt;*img=software.png*&gt; Software&lt;*/*&gt;")
layer.addDataSet(data2, 0x40aa77dd,
    "&lt;*block,valign=absmiddle*&gt;&lt;*img=computer.png*&gt; Hardware&lt;*/*&gt;")

# For a vertical stacked chart with positive data only, the last data set is always
# on top. However, in a vertical legend box, the last data set is at the bottom. This
# can be reversed by using the setLegend method.
layer.setLegend(ChartDirector::ReverseLegend)

# Output the chart
c.makeChart("percentarea.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
