<HTML>
<HEAD>
<Title>Multi-Line Chart</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Multi-Line Chart</p>
<hr class="separator">
<div class="content">
<img src="images/multiline.png">
<br><br>
This example demonstrates a chart with multiple lines of different styles. It also demonstrates using frame with rounded corners, title with glass shading effect, both vertical and horizontal grid lines, and a legend at the top of the plot area.<br><br>
<ul><li> The rounded frame is configured using <a href="BaseChart.setRoundedFrame.htm">BaseChart.setRoundedFrame</a>.<br><br>
<li> The glass shading effect of the title is defined using <a href="ChartDirector.glassEffect.htm">ChartDirector.glassEffect</a>, then applied to the title using <a href="Box.setBackground.htm">Box.setBackground</a> of the title <a href="TextBox.htm">TextBox</a> object.<br><br>
<li> Enable both vertical and horizontal grid lines using <a href="XYChart.setPlotArea.htm">XYChart.setPlotArea</a>.<br><br>
<li> Add a legend at the top of the chart using <a href="BaseChart.addLegend.htm">BaseChart.addLegend</a>.<br><br>
<li> Add an empty line layer using <a href="XYChart.addLineLayer2.htm">XYChart.addLineLayer2</a><br><br>
<li> Add multiple data sets to the line layer using <a href="Layer.addDataSet.htm">Layer.addDataSet</a>.<br><br>
<li> For the last line, the line color is a dash line color creating using <a href="BaseChart.dashLineColor.htm">BaseChart.dashLineColor</a>.<br><br>
<li> Set the line width for all lines in the layer using <a href="Layer.setLineWidth.htm">Layer.setLineWidth</a>. (To set the line width for one particular line, use <a href="DataSet.setLineWidth.htm">DataSet.setLineWidth</a>.)</ul>
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/multiline_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class MultilineController &lt; ApplicationController

    def index()
        @title = "Multi-Line Chart"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The data for the line chart
        data0 = [42, 49, 33, 38, 51, 46, 29, 41, 44, 57, 59, 52, 37, 34, 51, 56, 56, 60,
            70, 76, 63, 67, 75, 64, 51]
        data1 = [50, 55, 47, 34, 42, 49, 63, 62, 73, 59, 56, 50, 64, 60, 67, 67, 58, 59,
            73, 77, 84, 82, 80, 84, 98]
        data2 = [36, 28, 25, 33, 38, 20, 22, 30, 25, 33, 30, 24, 28, 15, 21, 26, 46, 42,
            48, 45, 43, 52, 64, 60, 70]

        # The labels for the line chart
        labels = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12",
            "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"]

        # Create an XYChart object of size 600 x 300 pixels, with a light blue (EEEEFF)
        # background, black border, 1 pxiel 3D border effect and rounded corners
        c = ChartDirector::XYChart.new(600, 300, 0xeeeeff, 0x000000, 1)
        c.setRoundedFrame()

        # Set the plotarea at (55, 58) and of size 520 x 195 pixels, with white
        # background. Turn on both horizontal and vertical grid lines with light grey
        # color (0xcccccc)
        c.setPlotArea(55, 58, 520, 195, 0xffffff, -1, -1, 0xcccccc, 0xcccccc)

        # Add a legend box at (50, 30) (top of the chart) with horizontal layout. Use 9
        # pts Arial Bold font. Set the background and border color to Transparent.
        c.addLegend(50, 30, false, "arialbd.ttf", 9).setBackground(
            ChartDirector::Transparent)

        # Add a title box to the chart using 15 pts Times Bold Italic font, on a light
        # blue (CCCCFF) background with glass effect. white (0xffffff) on a dark red
        # (0x800000) background, with a 1 pixel 3D border.
        c.addTitle("Application Server Throughput", "timesbi.ttf", 15).setBackground(
            0xccccff, 0x000000, ChartDirector::glassEffect())

        # Add a title to the y axis
        c.yAxis().setTitle("MBytes per hour")

        # Set the labels on the x axis.
        c.xAxis().setLabels(labels)

        # Display 1 out of 3 labels on the x-axis.
        c.xAxis().setLabelStep(3)

        # Add a title to the x axis
        c.xAxis().setTitle("Jun 12, 2006")

        # Add a line layer to the chart
        layer = c.addLineLayer2()

        # Set the default line width to 2 pixels
        layer.setLineWidth(2)

        # Add the three data sets to the line layer. For demo purpose, we use a dash line
        # color for the last line
        layer.addDataSet(data0, 0xff0000, "Server #1")
        layer.addDataSet(data1, 0x008800, "Server #2")
        layer.addDataSet(data2, c.dashLineColor(0x3333ff, ChartDirector::DashLine),
            "Server #3")

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/multiline.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The data for the line chart
data0 = [42, 49, 33, 38, 51, 46, 29, 41, 44, 57, 59, 52, 37, 34, 51, 56, 56, 60, 70,
    76, 63, 67, 75, 64, 51]
data1 = [50, 55, 47, 34, 42, 49, 63, 62, 73, 59, 56, 50, 64, 60, 67, 67, 58, 59, 73,
    77, 84, 82, 80, 84, 98]
data2 = [36, 28, 25, 33, 38, 20, 22, 30, 25, 33, 30, 24, 28, 15, 21, 26, 46, 42, 48,
    45, 43, 52, 64, 60, 70]

# The labels for the line chart
labels = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13",
    "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"]

# Create an XYChart object of size 600 x 300 pixels, with a light blue (EEEEFF)
# background, black border, 1 pxiel 3D border effect and rounded corners
c = ChartDirector::XYChart.new(600, 300, 0xeeeeff, 0x000000, 1)
c.setRoundedFrame()

# Set the plotarea at (55, 58) and of size 520 x 195 pixels, with white background.
# Turn on both horizontal and vertical grid lines with light grey color (0xcccccc)
c.setPlotArea(55, 58, 520, 195, 0xffffff, -1, -1, 0xcccccc, 0xcccccc)

# Add a legend box at (50, 30) (top of the chart) with horizontal layout. Use 9 pts
# Arial Bold font. Set the background and border color to Transparent.
c.addLegend(50, 30, false, "arialbd.ttf", 9).setBackground(ChartDirector::Transparent
    )

# Add a title box to the chart using 15 pts Times Bold Italic font, on a light blue
# (CCCCFF) background with glass effect. white (0xffffff) on a dark red (0x800000)
# background, with a 1 pixel 3D border.
c.addTitle("Application Server Throughput", "timesbi.ttf", 15).setBackground(
    0xccccff, 0x000000, ChartDirector::glassEffect())

# Add a title to the y axis
c.yAxis().setTitle("MBytes per hour")

# Set the labels on the x axis.
c.xAxis().setLabels(labels)

# Display 1 out of 3 labels on the x-axis.
c.xAxis().setLabelStep(3)

# Add a title to the x axis
c.xAxis().setTitle("Jun 12, 2006")

# Add a line layer to the chart
layer = c.addLineLayer2()

# Set the default line width to 2 pixels
layer.setLineWidth(2)

# Add the three data sets to the line layer. For demo purpose, we use a dash line
# color for the last line
layer.addDataSet(data0, 0xff0000, "Server #1")
layer.addDataSet(data1, 0x008800, "Server #2")
layer.addDataSet(data2, c.dashLineColor(0x3333ff, ChartDirector::DashLine),
    "Server #3")

# Output the chart
c.makeChart("multiline.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
