<HTML>
<HEAD>
<Title>General Curve Fitting</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">General Curve Fitting</p>
<hr class="separator">
<div class="content">
<img src="images/curvefitting.png">
<br><br>
This example demonstrates the LOWESS general purpose curve fitting that is built into ChartDirector.<br><br>
In regression curve fitting, a function type have to be chosen first, and the data are used to compute the best parameters of that function. For example, in polynomial regression, the function type is a polynomial of a given degree, and the data are used to determine the optimal polynomial coefficients.<br><br>
However, in many applications, the function type is not known or not expressible in algebraic form. To handle these cases, ChartDirector supports a general curve fitting algorithm known as LOWESS. For details, please refer to <a href="ArrayMath.lowess.htm">ArrayMath.lowess</a> and <a href="ArrayMath.lowess2.htm">ArrayMath.lowess2</a>.<br><br>
The LOWESS algorithm only adjusts the points to smoothen them. They still need to be joined together. In this example, the adjusted points are joined with a spline layer using <a href="XYChart.addSplineLayer.htm">XYChart.addSplineLayer</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/curvefitting_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class CurvefittingController &lt; ApplicationController

    def index()
        @title = "General Curve Fitting"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # Use random table to generate a random series. The random table is set to 1 col x
        # 51 rows, with 9 as the seed
        rantable = ChartDirector::RanTable.new(9, 1, 51)

        # Set the 1st column to start from 100, with changes between rows from -5 to +5
        rantable.setCol(0, 100, -5, 5)

        # Get the 1st column of the random table as the data set
        data = rantable.getCol(0)

        # Create a XYChart object of size 600 x 300 pixels
        c = ChartDirector::XYChart.new(600, 300)

        # Set the plotarea at (50, 35) and of size 500 x 240 pixels. Enable both the
        # horizontal and vertical grids by setting their colors to grey (0xc0c0c0)
        c.setPlotArea(50, 35, 500, 240).setGridColor(0xc0c0c0, 0xc0c0c0)

        # Add a title to the chart using 18 point Times Bold Itatic font.
        c.addTitle("LOWESS Generic Curve Fitting Algorithm", "timesbi.ttf", 18)

        # Set the y axis line width to 3 pixels
        c.yAxis().setWidth(3)

        # Add a title to the x axis using 12 pts Arial Bold Italic font
        c.xAxis().setTitle("Server Load (TPS)", "arialbi.ttf", 12)

        # Set the x axis line width to 3 pixels
        c.xAxis().setWidth(3)

        # Set the x axis scale from 0 - 50, with major tick every 5 units and minor tick
        # every 1 unit
        c.xAxis().setLinearScale(0, 50, 5, 1)

        # Add a blue layer to the chart
        layer = c.addLineLayer2()

        # Add a red (0x80ff0000) data set to the chart with square symbols
        layer.addDataSet(data, 0x80ff0000).setDataSymbol(ChartDirector::SquareSymbol)

        # Set the line width to 2 pixels
        layer.setLineWidth(2)

        # Use lowess for curve fitting, and plot the fitted data using a spline layer with
        # line width set to 3 pixels
        c.addSplineLayer(ChartDirector::ArrayMath.new(data).lowess().result(), 0x0000ff
            ).setLineWidth(3)

        # Set zero affinity to 0 to make sure the line is displayed in the most detail
        # scale
        c.yAxis().setAutoScale(0, 0, 0)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/curvefitting.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# Use random table to generate a random series. The random table is set to 1 col x 51
# rows, with 9 as the seed
rantable = ChartDirector::RanTable.new(9, 1, 51)

# Set the 1st column to start from 100, with changes between rows from -5 to +5
rantable.setCol(0, 100, -5, 5)

# Get the 1st column of the random table as the data set
data = rantable.getCol(0)

# Create a XYChart object of size 600 x 300 pixels
c = ChartDirector::XYChart.new(600, 300)

# Set the plotarea at (50, 35) and of size 500 x 240 pixels. Enable both the
# horizontal and vertical grids by setting their colors to grey (0xc0c0c0)
c.setPlotArea(50, 35, 500, 240).setGridColor(0xc0c0c0, 0xc0c0c0)

# Add a title to the chart using 18 point Times Bold Itatic font.
c.addTitle("LOWESS Generic Curve Fitting Algorithm", "timesbi.ttf", 18)

# Set the y axis line width to 3 pixels
c.yAxis().setWidth(3)

# Add a title to the x axis using 12 pts Arial Bold Italic font
c.xAxis().setTitle("Server Load (TPS)", "arialbi.ttf", 12)

# Set the x axis line width to 3 pixels
c.xAxis().setWidth(3)

# Set the x axis scale from 0 - 50, with major tick every 5 units and minor tick
# every 1 unit
c.xAxis().setLinearScale(0, 50, 5, 1)

# Add a blue layer to the chart
layer = c.addLineLayer2()

# Add a red (0x80ff0000) data set to the chart with square symbols
layer.addDataSet(data, 0x80ff0000).setDataSymbol(ChartDirector::SquareSymbol)

# Set the line width to 2 pixels
layer.setLineWidth(2)

# Use lowess for curve fitting, and plot the fitted data using a spline layer with
# line width set to 3 pixels
c.addSplineLayer(ChartDirector::ArrayMath.new(data).lowess().result(), 0x0000ff
    ).setLineWidth(3)

# Set zero affinity to 0 to make sure the line is displayed in the most detail scale
c.yAxis().setAutoScale(0, 0, 0)

# Output the chart
c.makeChart("curvefitting.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
