<HTML>
<HEAD>
<Title>Surface Wireframe</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Surface Wireframe</p>
<hr class="separator">
<div class="content">
<img src="images/surfacewireframe0.jpg">&nbsp;&nbsp;<img src="images/surfacewireframe1.jpg">&nbsp;&nbsp;<img src="images/surfacewireframe2.jpg">&nbsp;&nbsp;<img src="images/surfacewireframe3.jpg">&nbsp;&nbsp;<img src="images/surfacewireframe4.jpg">&nbsp;&nbsp;<img src="images/surfacewireframe5.jpg">
<br><br>
This example demonstrates the rectangular and triangular wireframes of a surface at different interpolation levels, configured using <a href="SurfaceChart.setShadingMode.htm">SurfaceChart.setShadingMode</a> and <a href="SurfaceChart.setInterpolation.htm">SurfaceChart.setInterpolation</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/surfacewireframe_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class SurfacewireframeController &lt; ApplicationController

    def index()
        @title = "Surface Wireframe"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 6
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The x and y coordinates of the grid
        dataX = [-2, -1, 0, 1, 2]
        dataY = [-2, -1, 0, 1, 2]

        # The values at the grid points. In this example, we will compute the values using
        # the formula z = square_root(15 - x * x - y * y).
        dataZ = Array.new((dataX.length) * (dataY.length))
        0.upto(dataY.length - 1) do |yIndex|
            y = dataY[yIndex]
            0.upto(dataX.length - 1) do |xIndex|
                x = dataX[xIndex]
                dataZ[yIndex * (dataX.length) + xIndex] = Math.sqrt(15 - x * x - y * y)
            end
        end

        # Create a SurfaceChart object of size 380 x 340 pixels, with white (ffffff)
        # background and grey (888888) border.
        c = ChartDirector::SurfaceChart.new(380, 340, 0xffffff, 0x888888)

        # Demonstrate various wireframes with and without interpolation
        if params["img"] == "0"
            # Original data without interpolation
            c.addTitle("5 x 5 Data Points\nStandard Shading", "arialbd.ttf", 12)
            c.setContourColor(0x80ffffff)
        elsif params["img"] == "1"
            # Original data, spline interpolated to 40 x 40 for smoothness
            c.addTitle("5 x 5 Points - Spline Fitted to 40 x 40\nStandard Shading",
                "arialbd.ttf", 12)
            c.setContourColor(0x80ffffff)
            c.setInterpolation(40, 40)
        elsif params["img"] == "2"
            # Rectangular wireframe of original data
            c.addTitle("5 x 5 Data Points\nRectangular Wireframe")
            c.setShadingMode(ChartDirector::RectangularFrame)
        elsif params["img"] == "3"
            # Rectangular wireframe of original data spline interpolated to 40 x 40
            c.addTitle("5 x 5 Points - Spline Fitted to 40 x 40\nRectangular Wireframe")
            c.setShadingMode(ChartDirector::RectangularFrame)
            c.setInterpolation(40, 40)
        elsif params["img"] == "4"
            # Triangular wireframe of original data
            c.addTitle("5 x 5 Data Points\nTriangular Wireframe")
            c.setShadingMode(ChartDirector::TriangularFrame)
        else
            # Triangular wireframe of original data spline interpolated to 40 x 40
            c.addTitle("5 x 5 Points - Spline Fitted to 40 x 40\nTriangular Wireframe")
            c.setShadingMode(ChartDirector::TriangularFrame)
            c.setInterpolation(40, 40)
        end

        # Set the center of the plot region at (200, 170), and set width x depth x height
        # to 200 x 200 x 150 pixels
        c.setPlotRegion(200, 170, 200, 200, 150)

        # Set the plot region wall thichness to 5 pixels
        c.setWallThickness(5)

        # Set the elevation and rotation angles to 20 and 30 degrees
        c.setViewAngle(20, 30)

        # Set the data to use to plot the chart
        c.setData(dataX, dataY, dataZ)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::JPG), :type =&gt; "image/jpeg",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/surfacewireframe.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

def createChart(img)

    # The x and y coordinates of the grid
    dataX = [-2, -1, 0, 1, 2]
    dataY = [-2, -1, 0, 1, 2]

    # The values at the grid points. In this example, we will compute the values
    # using the formula z = square_root(15 - x * x - y * y).
    dataZ = Array.new((dataX.length) * (dataY.length))
    0.upto(dataY.length - 1) do |yIndex|
        y = dataY[yIndex]
        0.upto(dataX.length - 1) do |xIndex|
            x = dataX[xIndex]
            dataZ[yIndex * (dataX.length) + xIndex] = Math.sqrt(15 - x * x - y * y)
        end
    end

    # Create a SurfaceChart object of size 380 x 340 pixels, with white (ffffff)
    # background and grey (888888) border.
    c = ChartDirector::SurfaceChart.new(380, 340, 0xffffff, 0x888888)

    # Demonstrate various wireframes with and without interpolation
    if img == "0"
        # Original data without interpolation
        c.addTitle("5 x 5 Data Points\nStandard Shading", "arialbd.ttf", 12)
        c.setContourColor(0x80ffffff)
    elsif img == "1"
        # Original data, spline interpolated to 40 x 40 for smoothness
        c.addTitle("5 x 5 Points - Spline Fitted to 40 x 40\nStandard Shading",
            "arialbd.ttf", 12)
        c.setContourColor(0x80ffffff)
        c.setInterpolation(40, 40)
    elsif img == "2"
        # Rectangular wireframe of original data
        c.addTitle("5 x 5 Data Points\nRectangular Wireframe")
        c.setShadingMode(ChartDirector::RectangularFrame)
    elsif img == "3"
        # Rectangular wireframe of original data spline interpolated to 40 x 40
        c.addTitle("5 x 5 Points - Spline Fitted to 40 x 40\nRectangular Wireframe")
        c.setShadingMode(ChartDirector::RectangularFrame)
        c.setInterpolation(40, 40)
    elsif img == "4"
        # Triangular wireframe of original data
        c.addTitle("5 x 5 Data Points\nTriangular Wireframe")
        c.setShadingMode(ChartDirector::TriangularFrame)
    else
        # Triangular wireframe of original data spline interpolated to 40 x 40
        c.addTitle("5 x 5 Points - Spline Fitted to 40 x 40\nTriangular Wireframe")
        c.setShadingMode(ChartDirector::TriangularFrame)
        c.setInterpolation(40, 40)
    end

    # Set the center of the plot region at (200, 170), and set width x depth x height
    # to 200 x 200 x 150 pixels
    c.setPlotRegion(200, 170, 200, 200, 150)

    # Set the plot region wall thichness to 5 pixels
    c.setWallThickness(5)

    # Set the elevation and rotation angles to 20 and 30 degrees
    c.setViewAngle(20, 30)

    # Set the data to use to plot the chart
    c.setData(dataX, dataY, dataZ)

    # Output the chart
    c.makeChart("surfacewireframe%s.jpg" % img)
end

createChart("0")
createChart("1")
createChart("2")
createChart("3")
createChart("4")
createChart("5")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
