<HTML>
<HEAD>
<Title>Arbitrary XY Line Chart</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Arbitrary XY Line Chart</p>
<hr class="separator">
<div class="content">
<img src="images/xyline.png">
<br><br>
This example demonstrates drawing a line chart with arbitrary x coordinates (not increasing or decreasing in one direction), and adding custom data labels to data points.<br><br>
The x values of the data points are set into the chart using <a href="Layer.setXData.htm">Layer.setXData</a>. ChartDirector merely joins the points together with lines. It does not require the points to following any particular direction.<br><br>
Note that this example has special labels for the start and end points of the lines. They are created using <a href="Layer.addCustomDataLabel.htm">Layer.addCustomDataLabel</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/xyline_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class XylineController &lt; ApplicationController

    def index()
        @title = "Arbitrary XY Line Chart"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 1
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # The (x, y) data for the first line
        dataX0 = [20, 90, 40, 30, 12]
        dataY0 = [10, 40, 75, 54, 20]

        # The (x, y) data for the second line
        dataX1 = [10, 40, 75, 54, 60]
        dataY1 = [50, 90, 40, 30, 10]

        # Create a XYChart object of size 450 x 450 pixels
        c = ChartDirector::XYChart.new(450, 450)

        # Set the plotarea at (55, 65) and of size 350 x 300 pixels, with white background
        # and a light grey border (0xc0c0c0). Turn on both horizontal and vertical grid
        # lines with light grey color (0xc0c0c0)
        c.setPlotArea(55, 65, 350, 300, 0xffffff, -1, 0xc0c0c0, 0xc0c0c0, -1)

        # Add a legend box at (50, 30) (top of the chart) with horizontal layout. Use 12
        # pts Times Bold Italic font. Set the background and border color to Transparent.
        c.addLegend(50, 30, false, "timesbi.ttf", 12).setBackground(
            ChartDirector::Transparent)

        # Add a title to the chart using 18 pts Times Bold Itatic font
        c.addTitle("Reaction Path", "timesbi.ttf", 18)

        # Add a title to the y axis using 12 pts Arial Bold Italic font
        c.yAxis().setTitle("Temperature (Celcius)", "arialbi.ttf", 12)

        # Set the y axis line width to 3 pixels
        c.yAxis().setWidth(3)

        # Add a title to the x axis using 12 pts Arial Bold Italic font
        c.xAxis().setTitle("Pressure (Pa)", "arialbi.ttf", 12)

        # Set the x axis line width to 3 pixels
        c.xAxis().setWidth(3)

        # Add a red (0xff3333) line layer using dataX0 and dataY0
        layer1 = c.addLineLayer(dataY0, 0xff3333, "Compound AAA")
        layer1.setXData(dataX0)

        # Set the line width to 3 pixels
        layer1.setLineWidth(3)

        # Use 9 pixel square symbols for the data points
        layer1.getDataSet(0).setDataSymbol(ChartDirector::SquareSymbol, 9)

        # Add custom text labels to the first and last point on the scatter plot using
        # Arial Bold font
        layer1.addCustomDataLabel(0, 0, "Start", "arialbd.ttf")
        layer1.addCustomDataLabel(0, 4, "End", "arialbd.ttf")

        # Add a green (0x33ff33) line layer using dataX1 and dataY1
        layer2 = c.addLineLayer(dataY1, 0x33ff33, "Compound BBB")
        layer2.setXData(dataX1)

        # Set the line width to 3 pixels
        layer2.setLineWidth(3)

        # Use 11 pixel diamond symbols for the data points
        layer2.getDataSet(0).setDataSymbol(ChartDirector::DiamondSymbol, 11)

        # Add custom text labels to the first and last point on the scatter plot using
        # Arial Bold font
        layer2.addCustomDataLabel(0, 0, "Start", "arialbd.ttf")
        layer2.addCustomDataLabel(0, 4, "End", "arialbd.ttf")

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/xyline.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

# The (x, y) data for the first line
dataX0 = [20, 90, 40, 30, 12]
dataY0 = [10, 40, 75, 54, 20]

# The (x, y) data for the second line
dataX1 = [10, 40, 75, 54, 60]
dataY1 = [50, 90, 40, 30, 10]

# Create a XYChart object of size 450 x 450 pixels
c = ChartDirector::XYChart.new(450, 450)

# Set the plotarea at (55, 65) and of size 350 x 300 pixels, with white background
# and a light grey border (0xc0c0c0). Turn on both horizontal and vertical grid lines
# with light grey color (0xc0c0c0)
c.setPlotArea(55, 65, 350, 300, 0xffffff, -1, 0xc0c0c0, 0xc0c0c0, -1)

# Add a legend box at (50, 30) (top of the chart) with horizontal layout. Use 12 pts
# Times Bold Italic font. Set the background and border color to Transparent.
c.addLegend(50, 30, false, "timesbi.ttf", 12).setBackground(
    ChartDirector::Transparent)

# Add a title to the chart using 18 pts Times Bold Itatic font
c.addTitle("Reaction Path", "timesbi.ttf", 18)

# Add a title to the y axis using 12 pts Arial Bold Italic font
c.yAxis().setTitle("Temperature (Celcius)", "arialbi.ttf", 12)

# Set the y axis line width to 3 pixels
c.yAxis().setWidth(3)

# Add a title to the x axis using 12 pts Arial Bold Italic font
c.xAxis().setTitle("Pressure (Pa)", "arialbi.ttf", 12)

# Set the x axis line width to 3 pixels
c.xAxis().setWidth(3)

# Add a red (0xff3333) line layer using dataX0 and dataY0
layer1 = c.addLineLayer(dataY0, 0xff3333, "Compound AAA")
layer1.setXData(dataX0)

# Set the line width to 3 pixels
layer1.setLineWidth(3)

# Use 9 pixel square symbols for the data points
layer1.getDataSet(0).setDataSymbol(ChartDirector::SquareSymbol, 9)

# Add custom text labels to the first and last point on the scatter plot using Arial
# Bold font
layer1.addCustomDataLabel(0, 0, "Start", "arialbd.ttf")
layer1.addCustomDataLabel(0, 4, "End", "arialbd.ttf")

# Add a green (0x33ff33) line layer using dataX1 and dataY1
layer2 = c.addLineLayer(dataY1, 0x33ff33, "Compound BBB")
layer2.setXData(dataX1)

# Set the line width to 3 pixels
layer2.setLineWidth(3)

# Use 11 pixel diamond symbols for the data points
layer2.getDataSet(0).setDataSymbol(ChartDirector::DiamondSymbol, 11)

# Add custom text labels to the first and last point on the scatter plot using Arial
# Bold font
layer2.addCustomDataLabel(0, 0, "Start", "arialbd.ttf")
layer2.addCustomDataLabel(0, 4, "End", "arialbd.ttf")

# Output the chart
c.makeChart("xyline.png")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
