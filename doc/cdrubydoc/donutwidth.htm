<HTML>
<HEAD>
<Title>Donut Width</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector Ver 5.0 (Ruby Edition)</p>
<p class="heading1">Donut Width</p>
<hr class="separator">
<div class="content">
<img src="images/donutwidth0.png">&nbsp;&nbsp;<img src="images/donutwidth1.png">&nbsp;&nbsp;<img src="images/donutwidth2.png">&nbsp;&nbsp;<img src="images/donutwidth3.png">&nbsp;&nbsp;<img src="images/donutwidth4.png">
<br><br>
This example demonstrates the effects of different donut widths.<br><br>
Donut widths are configured by using different inner and outer radii when calling <a href="PieChart.setDonutSize.htm">PieChart.setDonutSize</a>.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[Ruby On Rails Version - Controller]</b> app/controllers/donutwidth_controller.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>require("chartdirector")

class DonutwidthController &lt; ApplicationController

    def index()
        @title = "Donut Width"
        @ctrl_file = File.expand_path(__FILE__)
        @noOfCharts = 5
        render :template =&gt; "templates/chartview"
    end

    #
    # Render and deliver the chart
    #
    def getchart()
        # Determine the donut inner radius (as percentage of outer radius) based on input
        # parameter
        donutRadius = (params["img"]).to_i * 25

        # The data for the pie chart
        data = [10, 10, 10, 10, 10]

        # The labels for the pie chart
        labels = ["Marble", "Wood", "Granite", "Plastic", "Metal"]

        # Create a PieChart object of size 150 x 120 pixels, with a grey (EEEEEE)
        # background, black border and 1 pixel 3D border effect
        c = ChartDirector::PieChart.new(150, 120, 0xeeeeee, 0x000000, 1)

        # Set donut center at (75, 65) and the outer radius to 50 pixels. Inner radius is
        # computed according donutWidth
        c.setDonutSize(75, 60, 50, (50 * donutRadius / 100).to_i)

        # Add a title to show the donut width
        c.addTitle(sprintf("Inner Radius = %s %%", donutRadius), "Arial", 10
            ).setBackground(0xcccccc, 0)

        # Draw the pie in 3D
        c.set3D(12)

        # Set the pie data and the pie labels
        c.setData(data, labels)

        # Disable the sector labels by setting the color to Transparent
        c.setLabelStyle("", 8, ChartDirector::Transparent)

        # Output the chart
        send_data(c.makeChart2(ChartDirector::PNG), :type =&gt; "image/png",
            :disposition =&gt; "inline")
    end

end</pre></tr></td></table><br><b>[Ruby On Rails Version - View]</b> app/views/templates/chartview.rhtml
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;html&gt;
&lt;body style="margin:5px 0px 0px 5px"&gt;

&lt;!-- Title --&gt;
&lt;div style="font-size:18pt; font-family:verdana; font-weight:bold"&gt;
    &lt;%= @title %&gt;
&lt;/div&gt;
&lt;hr style="border:solid 1px #000080" /&gt;

&lt;!-- Source Code Listing Link --&gt;
&lt;div style="font-size:9pt; font-family:verdana; margin-bottom:1.5em"&gt;
    &lt;%= link_to "Source Code Listing", 
        :controller =&gt; "cddemo", :action =&gt; "viewsource",
        :ctrl_file =&gt; @ctrl_file, :view_file =&gt; File.expand_path(__FILE__) %&gt;
&lt;/div&gt;

&lt;!-- Create one or more IMG tags to display the demo chart(s) --&gt;
&lt;% 0.upto(@noOfCharts - 1) do |i| %&gt;
    &lt;img src="&lt;%= url_for(:action =&gt; "getchart", :img =&gt; i) %&gt;"&gt;
&lt;% end %&gt;

&lt;/body&gt;
&lt;/html&gt;</pre></tr></td></table><br><b>[Command Line Version]</b> rubydemo/donutwidth.rb
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>#!/usr/bin/env ruby
require("chartdirector")

def createChart(img)

    # Determine the donut inner radius (as percentage of outer radius) based on input
    # parameter
    donutRadius = img.to_i * 25

    # The data for the pie chart
    data = [10, 10, 10, 10, 10]

    # The labels for the pie chart
    labels = ["Marble", "Wood", "Granite", "Plastic", "Metal"]

    # Create a PieChart object of size 150 x 120 pixels, with a grey (EEEEEE)
    # background, black border and 1 pixel 3D border effect
    c = ChartDirector::PieChart.new(150, 120, 0xeeeeee, 0x000000, 1)

    # Set donut center at (75, 65) and the outer radius to 50 pixels. Inner radius is
    # computed according donutWidth
    c.setDonutSize(75, 60, 50, (50 * donutRadius / 100).to_i)

    # Add a title to show the donut width
    c.addTitle(sprintf("Inner Radius = %s %%", donutRadius), "Arial", 10
        ).setBackground(0xcccccc, 0)

    # Draw the pie in 3D
    c.set3D(12)

    # Set the pie data and the pie labels
    c.setData(data, labels)

    # Disable the sector labels by setting the color to Transparent
    c.setLabelStyle("", 8, ChartDirector::Transparent)

    # Output the chart
    c.makeChart("donutwidth%s.png" % img)
end

createChart("0")
createChart("1")
createChart("2")
createChart("3")
createChart("4")</pre></tr></td></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2008 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
